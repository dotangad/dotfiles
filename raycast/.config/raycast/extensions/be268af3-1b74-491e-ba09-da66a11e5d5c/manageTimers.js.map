{
  "version": 3,
  "sources": ["../src/manageTimers.tsx", "../src/hooks/useTimers.ts", "../src/timerUtils.ts", "../src/formatUtils.ts", "../src/RenameView.tsx", "../src/stopwatchUtils.ts", "../src/startCustomTimer.tsx", "../src/soundData.ts"],
  "sourcesContent": ["import { Action, ActionPanel, Color, Icon, List, useNavigation } from \"@raycast/api\";\nimport { useEffect } from \"react\";\nimport useTimers from \"./hooks/useTimers\";\nimport RenameView from \"./RenameView\";\nimport CustomTimerView from \"./startCustomTimer\";\nimport { formatDateTime, formatTime } from \"./formatUtils\";\n\nexport default function Command() {\n  const {\n    timers,\n    customTimers,\n    isLoading,\n    refreshTimers,\n    handleStopTimer,\n    handleStartCT,\n    handleCreateCT,\n    handleDeleteCT,\n  } = useTimers();\n  const { push } = useNavigation();\n\n  useEffect(() => {\n    refreshTimers();\n    setInterval(() => {\n      refreshTimers();\n    }, 1000);\n  }, []);\n\n  const runningIcon = { tag: { value: \"Running\", color: Color.Yellow } };\n  const finishedIcon = { tag: { value: \"Finished!\", color: Color.Green } };\n\n  return (\n    <List isLoading={isLoading}>\n      <List.Section title={timers?.length !== 0 && timers != null ? \"Currently Running\" : \"No Timers Running\"}>\n        {timers?.map((timer) => (\n          <List.Item\n            key={timer.originalFile}\n            icon={{ source: Icon.Clock, tintColor: timer.timeLeft === 0 ? Color.Green : Color.Yellow }}\n            title={timer.name}\n            subtitle={formatTime(timer.timeLeft) + \" left\"}\n            accessories={[\n              { text: formatTime(timer.secondsSet) + \" originally\" },\n              { text: `${timer.timeLeft === 0 ? \"Ended\" : \"Ends\"} at ${formatDateTime(timer.timeEnds)}` },\n              timer.timeLeft === 0 ? finishedIcon : runningIcon,\n            ]}\n            actions={\n              <ActionPanel>\n                <Action title=\"Stop Timer\" onAction={() => handleStopTimer(timer)} />\n                <Action\n                  title=\"Rename Timer\"\n                  onAction={() =>\n                    push(<RenameView currentName={timer.name} originalFile={timer.originalFile} ctID={null} />)\n                  }\n                />\n                <Action\n                  title=\"Save Timer as Preset\"\n                  shortcut={{\n                    modifiers: [\"cmd\", \"shift\"],\n                    key: \"enter\",\n                  }}\n                  onAction={() => handleCreateCT(timer)}\n                />\n              </ActionPanel>\n            }\n          />\n        ))}\n        <List.Item\n          key={0}\n          icon={Icon.Clock}\n          title={\"Create a new timer\"}\n          subtitle={\"Press Enter to start a timer\"}\n          actions={\n            <ActionPanel>\n              <Action\n                title=\"Start Timer\"\n                onAction={() => push(<CustomTimerView arguments={{ hours: \"\", minutes: \"\", seconds: \"\" }} />)}\n              />\n            </ActionPanel>\n          }\n        />\n      </List.Section>\n      <List.Section title=\"Custom Timers\">\n        {Object.keys(customTimers)\n          ?.sort((a, b) => {\n            return customTimers[a].timeInSeconds - customTimers[b].timeInSeconds;\n          })\n          .map((ctID) => (\n            <List.Item\n              key={ctID}\n              icon={Icon.Clock}\n              title={customTimers[ctID].name}\n              subtitle={formatTime(customTimers[ctID].timeInSeconds)}\n              actions={\n                <ActionPanel>\n                  <Action title=\"Start Timer\" onAction={() => handleStartCT(customTimers[ctID])} />\n                  <Action\n                    title=\"Rename Timer\"\n                    onAction={() =>\n                      push(\n                        <RenameView currentName={customTimers[ctID].name} originalFile={\"customTimer\"} ctID={ctID} />\n                      )\n                    }\n                  />\n                  <Action\n                    title=\"Delete Custom Timer\"\n                    shortcut={{\n                      modifiers: [\"ctrl\"],\n                      key: \"x\",\n                    }}\n                    onAction={() => handleDeleteCT(ctID)}\n                  />\n                </ActionPanel>\n              }\n            />\n          ))}\n      </List.Section>\n    </List>\n  );\n}\n", "import { environment } from \"@raycast/api\";\nimport { useState } from \"react\";\nimport {\n  checkForOverlyLoudAlert,\n  createCustomTimer,\n  deleteCustomTimer,\n  ensureCTFileExists,\n  getTimers,\n  readCustomTimers,\n  startTimer,\n  stopTimer,\n} from \"../timerUtils\";\nimport { CustomTimer, Timer } from \"../types\";\n\nexport default function useTimers() {\n  const [timers, setTimers] = useState<Timer[] | undefined>(undefined);\n  const [customTimers, setCustomTimers] = useState<Record<string, CustomTimer>>({});\n  const [isLoading, setIsLoading] = useState<boolean>(timers === undefined);\n\n  const refreshTimers = () => {\n    ensureCTFileExists();\n    const setOfTimers: Timer[] = getTimers();\n    setTimers(setOfTimers);\n    const setOfCustomTimers: Record<string, CustomTimer> = readCustomTimers();\n    setCustomTimers(setOfCustomTimers);\n    setIsLoading(false);\n  };\n\n  const handleStartTimer = (seconds: number, name: string, launchedFromMenuBar = false) => {\n    if (!checkForOverlyLoudAlert(launchedFromMenuBar)) return;\n    startTimer(seconds, name);\n    refreshTimers();\n  };\n\n  const handleStopTimer = (timer: Timer) => {\n    setTimers(timers?.filter((t: Timer) => t.originalFile !== timer.originalFile));\n    stopTimer(`${environment.supportPath}/${timer.originalFile}`);\n    refreshTimers();\n  };\n\n  const handleStartCT = (customTimer: CustomTimer, launchedFromMenuBar = false) => {\n    if (!checkForOverlyLoudAlert(launchedFromMenuBar)) return;\n    startTimer(customTimer.timeInSeconds, customTimer.name, customTimer.selectedSound);\n    refreshTimers();\n  };\n\n  const handleCreateCT = (timer: Timer) => {\n    // TODO: make it possible to provide selected sound into CustomTimer\n    const customTimer: CustomTimer = {\n      name: timer.name,\n      timeInSeconds: timer.secondsSet,\n      selectedSound: \"default\",\n    };\n    createCustomTimer(customTimer);\n    refreshTimers();\n  };\n\n  const handleDeleteCT = (ctID: string) => {\n    deleteCustomTimer(ctID);\n    refreshTimers();\n  };\n\n  return {\n    timers,\n    customTimers,\n    isLoading,\n    refreshTimers,\n    handleStartTimer,\n    handleStopTimer,\n    handleStartCT,\n    handleCreateCT,\n    handleDeleteCT,\n  };\n}\n", "import { environment, getPreferenceValues, popToRoot, showHUD, showToast, Toast } from \"@raycast/api\";\nimport { exec, execSync } from \"child_process\";\nimport { randomUUID } from \"crypto\";\nimport { existsSync, readdirSync, readFileSync, writeFileSync } from \"fs\";\nimport { extname } from \"path\";\nimport { CustomTimer, Preferences, Timer } from \"./types\";\nimport { formatTime, secondsBetweenDates } from \"./formatUtils\";\n\nconst DATAPATH = environment.supportPath + \"/customTimers.json\";\n\nconst checkForOverlyLoudAlert = (launchedFromMenuBar = false) => {\n  const prefs = getPreferenceValues<Preferences>();\n  if (parseFloat(prefs.volumeSetting) > 5.0) {\n    const errorMsg = \"\u26A0\uFE0F Timer alert volume should not be louder than 5 (it can get quite loud!)\";\n    if (launchedFromMenuBar) {\n      showHUD(errorMsg);\n    } else {\n      showToast({ style: Toast.Style.Failure, title: errorMsg });\n    }\n    return false;\n  }\n  return true;\n};\n\nasync function startTimer(timeInSeconds: number, timerName = \"Untitled\", selectedSound = \"default\") {\n  const fileName = environment.supportPath + \"/\" + new Date().toISOString() + \"---\" + timeInSeconds + \".timer\";\n  const masterName = fileName.replace(/:/g, \"__\");\n  writeFileSync(masterName, timerName);\n\n  const prefs = getPreferenceValues<Preferences>();\n  const selectedSoundPath = `${\n    environment.assetsPath + \"/\" + (selectedSound === \"default\" ? prefs.selectedSound : selectedSound)\n  }`;\n  const cmdParts = [`sleep ${timeInSeconds}`];\n  cmdParts.push(\n    `if [ -f \"${masterName}\" ]; then osascript -e 'display notification \"Timer \\\\\"${timerName}\\\\\" complete\" with title \"Ding!\"'`\n  );\n  const afplayString = `afplay \"${selectedSoundPath}\" --volume ${prefs.volumeSetting.replace(\",\", \".\")}`;\n  if (prefs.selectedSound === \"speak_timer_name\") {\n    cmdParts.push(`say \"${timerName}\"`);\n  } else {\n    cmdParts.push(afplayString);\n  }\n  if (prefs.ringContinuously) {\n    const dismissFile = `${masterName}`.replace(\".timer\", \".dismiss\");\n    writeFileSync(dismissFile, \".dismiss file for Timers\");\n    cmdParts.push(`while [ -f \"${dismissFile}\" ]; do ${afplayString}; done`);\n  }\n  cmdParts.push(`rm \"${masterName}\"; else echo \"Timer deleted\"; fi`);\n  exec(cmdParts.join(\" && \"), (error, stderr) => {\n    if (error) {\n      console.log(`error: ${error.message}`);\n      return;\n    }\n    if (stderr) {\n      console.log(`stderr: ${stderr}`);\n      return;\n    }\n  });\n  popToRoot();\n  await showHUD(`Timer \"${timerName}\" started for ${formatTime(timeInSeconds)}! \uD83C\uDF89`);\n}\n\nfunction stopTimer(timerFile: string) {\n  const deleteTimerCmd = `if [ -f \"${timerFile}\" ]; then rm \"${timerFile}\"; else echo \"Timer deleted\"; fi`;\n  const dismissFile = timerFile.replace(\".timer\", \".dismiss\");\n  const deleteDismissCmd = `if [ -f \"${dismissFile}\" ]; then rm \"${dismissFile}\"; else echo \"Timer deleted\"; fi`;\n  execSync(deleteTimerCmd);\n  execSync(deleteDismissCmd);\n}\n\nfunction getTimers() {\n  const setOfTimers: Timer[] = [];\n  const files = readdirSync(environment.supportPath);\n  files.forEach((timerFile: string) => {\n    if (extname(timerFile) == \".timer\") {\n      const timer: Timer = {\n        name: \"\",\n        secondsSet: -99,\n        timeLeft: -99,\n        originalFile: timerFile,\n        timeEnds: new Date(),\n      };\n      timer.name = readFileSync(environment.supportPath + \"/\" + timerFile).toString();\n      const timerFileParts = timerFile.split(\"---\");\n      timer.secondsSet = Number(timerFileParts[1].split(\".\")[0]);\n      const timeStarted = timerFileParts[0].replace(/__/g, \":\");\n      timer.timeLeft = Math.max(0, Math.round(timer.secondsSet - secondsBetweenDates({ d2: timeStarted })));\n      timer.timeEnds = new Date(timeStarted);\n      timer.timeEnds.setSeconds(timer.timeEnds.getSeconds() + timer.secondsSet);\n      setOfTimers.push(timer);\n    }\n  });\n  setOfTimers.sort((a, b) => {\n    return a.timeLeft - b.timeLeft;\n  });\n  return setOfTimers;\n}\n\nfunction renameTimer(timerFile: string, newName: string) {\n  const dataPath = environment.supportPath + \"/\" + timerFile;\n  writeFileSync(dataPath, newName);\n}\n\nfunction ensureCTFileExists() {\n  if (!existsSync(DATAPATH)) {\n    writeFileSync(DATAPATH, JSON.stringify({}));\n  }\n}\n\nfunction createCustomTimer(newTimer: CustomTimer) {\n  ensureCTFileExists();\n  const customTimers = JSON.parse(readFileSync(DATAPATH, \"utf8\"));\n  customTimers[randomUUID()] = newTimer;\n  writeFileSync(DATAPATH, JSON.stringify(customTimers));\n}\n\nfunction readCustomTimers() {\n  ensureCTFileExists();\n  return JSON.parse(readFileSync(DATAPATH, \"utf8\"));\n}\n\nfunction renameCustomTimer(ctID: string, newName: string) {\n  ensureCTFileExists();\n  const customTimers = JSON.parse(readFileSync(DATAPATH, \"utf8\"));\n  customTimers[ctID].name = newName;\n  writeFileSync(DATAPATH, JSON.stringify(customTimers));\n}\n\nfunction deleteCustomTimer(ctID: string) {\n  ensureCTFileExists();\n  const customTimers = JSON.parse(readFileSync(DATAPATH, \"utf8\"));\n  delete customTimers[ctID];\n  writeFileSync(DATAPATH, JSON.stringify(customTimers));\n}\n\nexport {\n  checkForOverlyLoudAlert,\n  createCustomTimer,\n  deleteCustomTimer,\n  ensureCTFileExists,\n  getTimers,\n  readCustomTimers,\n  renameTimer,\n  renameCustomTimer,\n  startTimer,\n  stopTimer,\n};\n", "const formatTime = (seconds: number) => {\n  const hours = Math.floor(seconds / 3600);\n  const mins = String(Math.floor((seconds % 3600) / 60)).padStart(2, \"0\");\n  const secs = String(Math.floor(seconds % 60)).padStart(2, \"0\");\n  return `${hours}:${mins}:${secs}`;\n};\n\nconst formatDateTime = (d: Date) => {\n  const parsedDate = new Date(d);\n  const datevalues = [\n    parsedDate.getFullYear().toString(),\n    parsedDate.getMonth().toString().padStart(2, \"0\"),\n    parsedDate.getDate().toString().padStart(2, \"0\"),\n  ];\n  const timevalues = [parsedDate.getHours(), parsedDate.getMinutes(), parsedDate.getSeconds()].map((x) =>\n    x.toString().padStart(2, \"0\")\n  );\n  const date = datevalues.join(\"-\");\n  const time = timevalues.join(\":\");\n  return `${date} ${time}`;\n};\n\nconst secondsBetweenDates = (args: { d1?: Date | string; d2?: Date | string }) => {\n  args.d1 = args.d1 == \"----\" ? undefined : args.d1;\n  args.d2 = args.d2 == \"----\" ? undefined : args.d2;\n  return (\n    Math.round(\n      (args.d1 ? new Date(args.d1) : new Date()).getTime() - (args.d2 ? new Date(args.d2) : new Date()).getTime()\n    ) / 1000\n  );\n};\n\nexport { formatTime, formatDateTime, secondsBetweenDates };\n", "import { Action, ActionPanel, Form, popToRoot, Toast } from \"@raycast/api\";\nimport { renameStopwatch } from \"./stopwatchUtils\";\nimport { renameCustomTimer, renameTimer } from \"./timerUtils\";\n\nexport default function RenameView(props: { currentName: string; originalFile: string; ctID: string | null }) {\n  const handleSubmit = (newName: string) => {\n    if (newName === \"\" || newName === props.currentName) {\n      const toast = new Toast({ style: Toast.Style.Failure, title: \"No new name given!\" });\n      toast.show();\n    } else {\n      popToRoot();\n      switch (props.originalFile) {\n        case \"customTimer\":\n          renameCustomTimer(props.ctID ? props.ctID : \"-99\", newName);\n          break;\n        case \"stopwatch\":\n          renameStopwatch(props.ctID ? props.ctID : \"-99\", newName);\n          break;\n        default:\n          renameTimer(props.originalFile, newName);\n          break;\n      }\n      const toast = new Toast({ style: Toast.Style.Success, title: `Renamed to ${newName}!` });\n      toast.show();\n    }\n  };\n\n  return (\n    <Form\n      actions={\n        <ActionPanel>\n          <Action.SubmitForm title=\"Rename\" onSubmit={(values: { newName: string }) => handleSubmit(values.newName)} />\n        </ActionPanel>\n      }\n    >\n      <Form.TextField id=\"newName\" title=\"New name\" placeholder={props.currentName} />\n    </Form>\n  );\n}\n", "import { environment, popToRoot, showHUD } from \"@raycast/api\";\nimport { execSync } from \"child_process\";\nimport { randomUUID } from \"crypto\";\nimport { existsSync, readdirSync, readFileSync, writeFileSync } from \"fs\";\nimport { extname } from \"path\";\nimport { secondsBetweenDates } from \"./formatUtils\";\nimport { Stopwatch } from \"./types\";\n\nconst SWPATH = environment.supportPath + \"/raycast-stopwatches.json\";\n\nconst ensureSWFileExists = () => {\n  if (!existsSync(SWPATH) || readFileSync(SWPATH).toString() == \"\") {\n    writeFileSync(SWPATH, \"[]\");\n  }\n};\n\nconst initStopwatch = (swName = \"\"): Stopwatch => {\n  return {\n    name: swName,\n    swID: randomUUID(),\n    timeStarted: new Date(),\n    timeElapsed: -99,\n    lastPaused: \"----\",\n    pauseElapsed: 0,\n  };\n};\n\nconst processStopwatches = (swSet: Stopwatch[]) => {\n  swSet.map((x) => {\n    if (x.lastPaused != \"----\") {\n      x.timeElapsed = Math.max(0, secondsBetweenDates({ d1: x.lastPaused, d2: x.timeStarted }) - x.pauseElapsed);\n    } else {\n      const rawElapsedTime = Math.max(0, secondsBetweenDates({ d2: x.timeStarted }));\n      x.timeElapsed = rawElapsedTime - x.pauseElapsed;\n    }\n  });\n  return swSet;\n};\n\nconst getStopwatches = () => {\n  ensureSWFileExists();\n  const rawStopwatches: Stopwatch[] = JSON.parse(readFileSync(SWPATH).toString());\n  const fullStopwatchSet = cleanUpOldStopwatches(rawStopwatches);\n  const setOfStopwatches = processStopwatches(fullStopwatchSet);\n  setOfStopwatches.sort((a, b) => {\n    return a.timeElapsed - b.timeElapsed;\n  });\n  return setOfStopwatches;\n};\n\nconst startStopwatch = async (swName = \"Untitled\") => {\n  ensureSWFileExists();\n  const swStore: Stopwatch[] = JSON.parse(readFileSync(SWPATH).toString());\n  const newTimer = initStopwatch(swName);\n  swStore.push(newTimer);\n  writeFileSync(SWPATH, JSON.stringify(swStore));\n\n  popToRoot();\n  await showHUD(`Stopwatch \"${swName}\" started! \uD83C\uDF89`);\n};\n\nconst pauseStopwatch = (swToPause: string) => {\n  ensureSWFileExists();\n  let swStore: Stopwatch[] = JSON.parse(readFileSync(SWPATH).toString());\n  swStore = swStore.map((s) => (s.swID == swToPause ? { ...s, lastPaused: new Date() } : s));\n  writeFileSync(SWPATH, JSON.stringify(swStore));\n};\n\nconst unpauseStopwatch = (swToUnpause: string) => {\n  ensureSWFileExists();\n  let swStore: Stopwatch[] = JSON.parse(readFileSync(SWPATH).toString());\n  swStore = swStore.map((s) =>\n    s.swID == swToUnpause\n      ? {\n          ...s,\n          pauseElapsed: s.pauseElapsed + secondsBetweenDates({ d2: s.lastPaused }),\n          lastPaused: \"----\",\n        }\n      : s\n  );\n  writeFileSync(SWPATH, JSON.stringify(swStore));\n};\n\nconst stopStopwatch = (swToDelete: string) => {\n  ensureSWFileExists();\n  let swStore: Stopwatch[] = JSON.parse(readFileSync(SWPATH).toString());\n  swStore = swStore.filter((s: Stopwatch) => s.swID !== swToDelete);\n  writeFileSync(SWPATH, JSON.stringify(swStore));\n};\n\nconst cleanUpOldStopwatches = (newStore: Stopwatch[]) => {\n  const files = readdirSync(environment.supportPath);\n  files.forEach((swFile: string) => {\n    if (extname(swFile) == \".stopwatch\") {\n      const stopwatch = initStopwatch(readFileSync(environment.supportPath + \"/\" + swFile).toString());\n      const timeStarted = swFile.replace(/__/g, \":\").replace(\".stopwatch\", \"\");\n      stopwatch.timeStarted = new Date(timeStarted);\n      stopwatch.timeElapsed = Math.max(0, secondsBetweenDates({}));\n      execSync(`rm \"${environment.supportPath}/${swFile}\"`);\n      newStore.push(stopwatch);\n    }\n  });\n  writeFileSync(SWPATH, JSON.stringify(newStore));\n  return newStore;\n};\n\nconst renameStopwatch = (swID: string, newName: string) => {\n  ensureSWFileExists();\n  const stopwatches: Stopwatch[] = JSON.parse(readFileSync(SWPATH, \"utf8\"));\n  const renamedSW = stopwatches.map((x) => (x.swID == swID ? { ...x, name: newName } : x));\n  writeFileSync(SWPATH, JSON.stringify(renamedSW));\n};\n\nexport { getStopwatches, pauseStopwatch, unpauseStopwatch, startStopwatch, stopStopwatch, renameStopwatch };\n", "import { Action, ActionPanel, closeMainWindow, Form, getPreferenceValues, Toast } from \"@raycast/api\";\nimport { useState } from \"react\";\nimport { soundData } from \"./soundData\";\nimport { checkForOverlyLoudAlert, createCustomTimer, ensureCTFileExists, startTimer } from \"./timerUtils\";\nimport { CTInlineArgs, InputField, RayFormEvent, Values } from \"./types\";\n\nexport default function CustomTimerView(props: { arguments: CTInlineArgs }) {\n  const hasArgs = Object.values(props.arguments).some((x) => x !== \"\");\n  const [hourErr, setHourErr] = useState<string | undefined>();\n  const [minErr, setMinErr] = useState<string | undefined>();\n  const [secErr, setSecErr] = useState<string | undefined>();\n\n  const prefs = getPreferenceValues();\n\n  const handleSubmit = (values: Values) => {\n    ensureCTFileExists();\n    if (values.hours === \"\" && values.minutes === \"\" && values.seconds === \"\") {\n      const toast = new Toast({ style: Toast.Style.Failure, title: \"No values set for timer length!\" });\n      toast.show();\n    } else if (isNaN(Number(values.hours))) {\n      setHourErr(\"Hours must be a number!\");\n    } else if (isNaN(Number(values.minutes))) {\n      setMinErr(\"Minutes must be a number!\");\n    } else if (isNaN(Number(values.seconds))) {\n      setSecErr(\"Seconds must be a number!\");\n    } else {\n      if (!checkForOverlyLoudAlert()) return;\n      closeMainWindow();\n      const timerName = values.name ? values.name : \"Untitled\";\n      const timeInSeconds = 3600 * Number(values.hours) + 60 * Number(values.minutes) + Number(values.seconds);\n      startTimer(timeInSeconds, timerName, values.selectedSound);\n      if (values.willBeSaved)\n        createCustomTimer({ name: values.name, timeInSeconds: timeInSeconds, selectedSound: values.selectedSound });\n    }\n  };\n\n  const dropHourErrorIfNeeded = () => {\n    if (hourErr && hourErr.length > 0) {\n      setHourErr(undefined);\n    }\n  };\n\n  const dropMinErrorIfNeeded = () => {\n    if (minErr && minErr.length > 0) {\n      setMinErr(undefined);\n    }\n  };\n\n  const dropSecErrorIfNeeded = () => {\n    if (secErr && secErr.length > 0) {\n      setSecErr(undefined);\n    }\n  };\n\n  const hourValidator = (event: RayFormEvent) => {\n    const input = event.target.value;\n    if (isNaN(Number(input))) {\n      setHourErr(\"Hours must be a number!\");\n    } else {\n      dropHourErrorIfNeeded();\n    }\n  };\n\n  const minValidator = (event: RayFormEvent) => {\n    const input = event.target.value;\n    if (isNaN(Number(input))) {\n      setMinErr(\"Minutes must be a number!\");\n    } else {\n      dropMinErrorIfNeeded();\n    }\n  };\n\n  const secValidator = (event: RayFormEvent) => {\n    const input = event.target.value;\n    if (isNaN(Number(input))) {\n      setSecErr(\"Seconds must be a number!\");\n    } else {\n      dropSecErrorIfNeeded();\n    }\n  };\n\n  const inputFields: InputField[] = [\n    {\n      id: \"hours\",\n      title: \"Hours\",\n      placeholder: \"0\",\n      err: hourErr,\n      drop: dropHourErrorIfNeeded,\n      validator: hourValidator,\n    },\n    {\n      id: \"minutes\",\n      title: \"Minutes\",\n      placeholder: \"00\",\n      err: minErr,\n      drop: dropMinErrorIfNeeded,\n      validator: minValidator,\n    },\n    {\n      id: \"seconds\",\n      title: \"Seconds\",\n      placeholder: \"00\",\n      err: secErr,\n      drop: dropSecErrorIfNeeded,\n      validator: secValidator,\n    },\n  ];\n  const sortOrder = prefs.newTimerInputOrder;\n  sortOrder !== \"hhmmss\" ? inputFields.reverse() : inputFields;\n\n  return (\n    <Form\n      actions={\n        <ActionPanel>\n          <Action.SubmitForm title=\"Start Custom Timer\" onSubmit={(values: Values) => handleSubmit(values)} />\n        </ActionPanel>\n      }\n    >\n      {inputFields.map((item, index) => (\n        <Form.TextField\n          key={index}\n          id={item.id}\n          title={item.title}\n          placeholder={item.placeholder}\n          defaultValue={props.arguments[item.id]}\n          error={item.err}\n          onChange={item.drop}\n          onBlur={item.validator}\n        />\n      ))}\n      <Form.Dropdown id=\"selectedSound\" defaultValue=\"default\" title=\"Sound\">\n        <Form.Dropdown.Item value=\"default\" title=\"Default\" />\n        {soundData.map((item, index) => (\n          <Form.Dropdown.Item\n            key={index}\n            title={item.value === prefs.selectedSound ? `${item.title} (currently selected)` : item.title}\n            value={item.value}\n            icon={item.icon}\n          />\n        ))}\n      </Form.Dropdown>\n      <Form.TextField id=\"name\" title=\"Name\" placeholder=\"Pour Tea\" autoFocus={hasArgs} />\n      <Form.Checkbox id=\"willBeSaved\" label=\"Save as preset\" />\n    </Form>\n  );\n}\n", "import { SoundData } from \"./types\";\nimport { Icon } from \"@raycast/api\";\n\nconst soundData: SoundData[] = [\n  {\n    title: \"Alarm Clock\",\n    icon: Icon.Alarm,\n    value: \"alarmClock.wav\",\n  },\n  {\n    title: \"Dismembered Woodpecker\",\n    icon: Icon.Bird,\n    value: \"dismemberedWoodpecker.wav\",\n  },\n  {\n    title: \"Flute Riff\",\n    icon: Icon.Music,\n    value: \"fluteRiff.wav\",\n  },\n  {\n    title: \"Level Up\",\n    icon: Icon.Trophy,\n    value: \"levelUp.wav\",\n  },\n  {\n    title: \"Piano Chime\",\n    icon: Icon.Music,\n    value: \"pianoChime.wav\",\n  },\n  {\n    title: \"Terminator\",\n    icon: Icon.BarCode,\n    value: \"terminator.wav\",\n  },\n  {\n    title: \"Speak Timer Name\",\n    icon: Icon.Person,\n    value: \"speak_timer_name\",\n  },\n];\nexport { soundData };\n"],
  "mappings": "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",
  "names": ["manageTimers_exports", "__export", "Command", "__toCommonJS", "import_api", "import_react", "import_api", "import_react", "import_api", "import_child_process", "import_crypto", "import_fs", "import_path", "formatTime", "seconds", "hours", "mins", "secs", "formatDateTime", "d", "parsedDate", "datevalues", "timevalues", "x", "date", "time", "secondsBetweenDates", "args", "DATAPATH", "checkForOverlyLoudAlert", "launchedFromMenuBar", "prefs", "errorMsg", "startTimer", "timeInSeconds", "timerName", "selectedSound", "masterName", "selectedSoundPath", "cmdParts", "afplayString", "dismissFile", "error", "stderr", "formatTime", "stopTimer", "timerFile", "deleteTimerCmd", "deleteDismissCmd", "getTimers", "setOfTimers", "timer", "timerFileParts", "timeStarted", "secondsBetweenDates", "a", "b", "renameTimer", "newName", "dataPath", "ensureCTFileExists", "createCustomTimer", "newTimer", "customTimers", "readCustomTimers", "renameCustomTimer", "ctID", "deleteCustomTimer", "useTimers", "timers", "setTimers", "customTimers", "setCustomTimers", "isLoading", "setIsLoading", "refreshTimers", "ensureCTFileExists", "setOfTimers", "getTimers", "setOfCustomTimers", "readCustomTimers", "seconds", "name", "launchedFromMenuBar", "checkForOverlyLoudAlert", "startTimer", "timer", "t", "stopTimer", "customTimer", "createCustomTimer", "ctID", "deleteCustomTimer", "import_api", "import_api", "import_fs", "SWPATH", "ensureSWFileExists", "renameStopwatch", "swID", "newName", "ensureSWFileExists", "renamedSW", "SWPATH", "x", "import_jsx_runtime", "RenameView", "props", "handleSubmit", "newName", "renameCustomTimer", "renameStopwatch", "renameTimer", "values", "import_api", "import_react", "import_api", "soundData", "import_jsx_runtime", "CustomTimerView", "props", "hasArgs", "x", "hourErr", "setHourErr", "minErr", "setMinErr", "secErr", "setSecErr", "prefs", "handleSubmit", "values", "ensureCTFileExists", "checkForOverlyLoudAlert", "timerName", "timeInSeconds", "startTimer", "createCustomTimer", "dropHourErrorIfNeeded", "dropMinErrorIfNeeded", "dropSecErrorIfNeeded", "inputFields", "event", "input", "item", "index", "soundData", "import_jsx_runtime", "Command", "timers", "customTimers", "isLoading", "refreshTimers", "handleStopTimer", "handleStartCT", "handleCreateCT", "handleDeleteCT", "useTimers", "push", "runningIcon", "finishedIcon", "timer", "formatTime", "formatDateTime", "RenameView", "CustomTimerView", "b", "ctID"]
}
