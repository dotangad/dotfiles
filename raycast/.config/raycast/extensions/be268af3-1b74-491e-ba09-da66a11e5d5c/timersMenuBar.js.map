{
  "version": 3,
  "sources": ["../src/timersMenuBar.tsx", "../src/hooks/useTimers.ts", "../src/timerUtils.ts", "../src/formatUtils.ts"],
  "sourcesContent": ["import { Icon, MenuBarExtra, launchCommand, LaunchType, getPreferenceValues } from \"@raycast/api\";\nimport { useEffect } from \"react\";\nimport useTimers from \"./hooks/useTimers\";\nimport { formatTime } from \"./formatUtils\";\nimport { Preferences } from \"./types\";\n\nexport default function Command() {\n  const { timers, customTimers, isLoading, refreshTimers, handleStartTimer, handleStopTimer, handleStartCT } =\n    useTimers();\n  useEffect(() => {\n    refreshTimers();\n    setInterval(() => {\n      refreshTimers();\n    }, 1000);\n  }, []);\n\n  if (isLoading) {\n    refreshTimers();\n  }\n  const prefs = getPreferenceValues<Preferences>();\n  if (\n    (timers == undefined || timers.length == 0 || timers.length == undefined) &&\n    prefs.showMenuBarItemWhen !== \"always\"\n  ) {\n    return null;\n  }\n\n  const getTimerMenuBarTitle = () => {\n    if (timers === undefined || timers?.length === 0 || timers.length == undefined) {\n      return undefined;\n    } else if (prefs.showTitleInMenuBar) {\n      return `${timers[0].name}: ~${formatTime(timers[0].timeLeft)}`;\n    } else {\n      return `~${formatTime(timers[0].timeLeft)}`;\n    }\n  };\n\n  return (\n    <MenuBarExtra\n      icon={prefs.showMenuBarItemWhen !== \"never\" ? Icon.Clock : undefined}\n      isLoading={isLoading}\n      title={getTimerMenuBarTitle()}\n    >\n      <MenuBarExtra.Item title=\"Click running timer to stop\" />\n      {timers?.map((timer) => (\n        <MenuBarExtra.Item\n          title={timer.name + \": \" + formatTime(timer.timeLeft) + \" left\"}\n          key={timer.originalFile}\n          onAction={() => handleStopTimer(timer)}\n        />\n      ))}\n\n      <MenuBarExtra.Section>\n        {Object.keys(customTimers)\n          ?.sort((a, b) => {\n            return customTimers[a].timeInSeconds - customTimers[b].timeInSeconds;\n          })\n          .map((ctID) => (\n            <MenuBarExtra.Item\n              title={'Start \"' + customTimers[ctID].name + '\"'}\n              key={ctID}\n              onAction={() => handleStartCT(customTimers[ctID], true)}\n            />\n          ))}\n      </MenuBarExtra.Section>\n\n      <MenuBarExtra.Section>\n        <MenuBarExtra.Item\n          title=\"Start 2 Minute Timer\"\n          onAction={() => handleStartTimer(60 * 2, \"2 Minute Timer\", true)}\n          key=\"2M\"\n        />\n        <MenuBarExtra.Item\n          title=\"Start 5 Minute Timer\"\n          onAction={() => handleStartTimer(60 * 5, \"5 Minute Timer\", true)}\n          key=\"5M\"\n        />\n        <MenuBarExtra.Item\n          title=\"Start 10 Minute Timer\"\n          onAction={() => handleStartTimer(60 * 10, \"10 Minute Timer\", true)}\n          key=\"10M\"\n        />\n        <MenuBarExtra.Item\n          title=\"Start 15 Minute Timer\"\n          onAction={() => handleStartTimer(60 * 15, \"15 Minute Timer\", true)}\n          key=\"15M\"\n        />\n        <MenuBarExtra.Item\n          title=\"Start 30 Minute Timer\"\n          onAction={() => handleStartTimer(60 * 30, \"30 Minute Timer\", true)}\n          key=\"30M\"\n        />\n        <MenuBarExtra.Item\n          title=\"Start 45 Minute Timer\"\n          onAction={() => handleStartTimer(60 * 45, \"45 Minute Timer\", true)}\n          key=\"45M\"\n        />\n        <MenuBarExtra.Item\n          title=\"Start 60 Minute Timer\"\n          onAction={() => handleStartTimer(60 * 60, \"60 Minute Timer\", true)}\n          key=\"60M\"\n        />\n        <MenuBarExtra.Item\n          title=\"Start 90 Minute Timer\"\n          onAction={() => handleStartTimer(60 * 60 * 1.5, \"90 Minute Timer\", true)}\n          key=\"90M\"\n        />\n      </MenuBarExtra.Section>\n\n      <MenuBarExtra.Section title=\"Custom Timer\">\n        <MenuBarExtra.Item\n          title=\"Start Custom Timer\"\n          onAction={async () => await launchCommand({ name: \"startCustomTimer\", type: LaunchType.UserInitiated })}\n          key=\"custom\"\n        />\n      </MenuBarExtra.Section>\n    </MenuBarExtra>\n  );\n}\n", "import { environment } from \"@raycast/api\";\nimport { useState } from \"react\";\nimport {\n  checkForOverlyLoudAlert,\n  createCustomTimer,\n  deleteCustomTimer,\n  ensureCTFileExists,\n  getTimers,\n  readCustomTimers,\n  startTimer,\n  stopTimer,\n} from \"../timerUtils\";\nimport { CustomTimer, Timer } from \"../types\";\n\nexport default function useTimers() {\n  const [timers, setTimers] = useState<Timer[] | undefined>(undefined);\n  const [customTimers, setCustomTimers] = useState<Record<string, CustomTimer>>({});\n  const [isLoading, setIsLoading] = useState<boolean>(timers === undefined);\n\n  const refreshTimers = () => {\n    ensureCTFileExists();\n    const setOfTimers: Timer[] = getTimers();\n    setTimers(setOfTimers);\n    const setOfCustomTimers: Record<string, CustomTimer> = readCustomTimers();\n    setCustomTimers(setOfCustomTimers);\n    setIsLoading(false);\n  };\n\n  const handleStartTimer = (seconds: number, name: string, launchedFromMenuBar = false) => {\n    if (!checkForOverlyLoudAlert(launchedFromMenuBar)) return;\n    startTimer(seconds, name);\n    refreshTimers();\n  };\n\n  const handleStopTimer = (timer: Timer) => {\n    setTimers(timers?.filter((t: Timer) => t.originalFile !== timer.originalFile));\n    stopTimer(`${environment.supportPath}/${timer.originalFile}`);\n    refreshTimers();\n  };\n\n  const handleStartCT = (customTimer: CustomTimer, launchedFromMenuBar = false) => {\n    if (!checkForOverlyLoudAlert(launchedFromMenuBar)) return;\n    startTimer(customTimer.timeInSeconds, customTimer.name, customTimer.selectedSound);\n    refreshTimers();\n  };\n\n  const handleCreateCT = (timer: Timer) => {\n    // TODO: make it possible to provide selected sound into CustomTimer\n    const customTimer: CustomTimer = {\n      name: timer.name,\n      timeInSeconds: timer.secondsSet,\n      selectedSound: \"default\",\n    };\n    createCustomTimer(customTimer);\n    refreshTimers();\n  };\n\n  const handleDeleteCT = (ctID: string) => {\n    deleteCustomTimer(ctID);\n    refreshTimers();\n  };\n\n  return {\n    timers,\n    customTimers,\n    isLoading,\n    refreshTimers,\n    handleStartTimer,\n    handleStopTimer,\n    handleStartCT,\n    handleCreateCT,\n    handleDeleteCT,\n  };\n}\n", "import { environment, getPreferenceValues, popToRoot, showHUD, showToast, Toast } from \"@raycast/api\";\nimport { exec, execSync } from \"child_process\";\nimport { randomUUID } from \"crypto\";\nimport { existsSync, readdirSync, readFileSync, writeFileSync } from \"fs\";\nimport { extname } from \"path\";\nimport { CustomTimer, Preferences, Timer } from \"./types\";\nimport { formatTime, secondsBetweenDates } from \"./formatUtils\";\n\nconst DATAPATH = environment.supportPath + \"/customTimers.json\";\n\nconst checkForOverlyLoudAlert = (launchedFromMenuBar = false) => {\n  const prefs = getPreferenceValues<Preferences>();\n  if (parseFloat(prefs.volumeSetting) > 5.0) {\n    const errorMsg = \"\u26A0\uFE0F Timer alert volume should not be louder than 5 (it can get quite loud!)\";\n    if (launchedFromMenuBar) {\n      showHUD(errorMsg);\n    } else {\n      showToast({ style: Toast.Style.Failure, title: errorMsg });\n    }\n    return false;\n  }\n  return true;\n};\n\nasync function startTimer(timeInSeconds: number, timerName = \"Untitled\", selectedSound = \"default\") {\n  const fileName = environment.supportPath + \"/\" + new Date().toISOString() + \"---\" + timeInSeconds + \".timer\";\n  const masterName = fileName.replace(/:/g, \"__\");\n  writeFileSync(masterName, timerName);\n\n  const prefs = getPreferenceValues<Preferences>();\n  const selectedSoundPath = `${\n    environment.assetsPath + \"/\" + (selectedSound === \"default\" ? prefs.selectedSound : selectedSound)\n  }`;\n  const cmdParts = [`sleep ${timeInSeconds}`];\n  cmdParts.push(\n    `if [ -f \"${masterName}\" ]; then osascript -e 'display notification \"Timer \\\\\"${timerName}\\\\\" complete\" with title \"Ding!\"'`\n  );\n  const afplayString = `afplay \"${selectedSoundPath}\" --volume ${prefs.volumeSetting.replace(\",\", \".\")}`;\n  if (prefs.selectedSound === \"speak_timer_name\") {\n    cmdParts.push(`say \"${timerName}\"`);\n  } else {\n    cmdParts.push(afplayString);\n  }\n  if (prefs.ringContinuously) {\n    const dismissFile = `${masterName}`.replace(\".timer\", \".dismiss\");\n    writeFileSync(dismissFile, \".dismiss file for Timers\");\n    cmdParts.push(`while [ -f \"${dismissFile}\" ]; do ${afplayString}; done`);\n  }\n  cmdParts.push(`rm \"${masterName}\"; else echo \"Timer deleted\"; fi`);\n  exec(cmdParts.join(\" && \"), (error, stderr) => {\n    if (error) {\n      console.log(`error: ${error.message}`);\n      return;\n    }\n    if (stderr) {\n      console.log(`stderr: ${stderr}`);\n      return;\n    }\n  });\n  popToRoot();\n  await showHUD(`Timer \"${timerName}\" started for ${formatTime(timeInSeconds)}! \uD83C\uDF89`);\n}\n\nfunction stopTimer(timerFile: string) {\n  const deleteTimerCmd = `if [ -f \"${timerFile}\" ]; then rm \"${timerFile}\"; else echo \"Timer deleted\"; fi`;\n  const dismissFile = timerFile.replace(\".timer\", \".dismiss\");\n  const deleteDismissCmd = `if [ -f \"${dismissFile}\" ]; then rm \"${dismissFile}\"; else echo \"Timer deleted\"; fi`;\n  execSync(deleteTimerCmd);\n  execSync(deleteDismissCmd);\n}\n\nfunction getTimers() {\n  const setOfTimers: Timer[] = [];\n  const files = readdirSync(environment.supportPath);\n  files.forEach((timerFile: string) => {\n    if (extname(timerFile) == \".timer\") {\n      const timer: Timer = {\n        name: \"\",\n        secondsSet: -99,\n        timeLeft: -99,\n        originalFile: timerFile,\n        timeEnds: new Date(),\n      };\n      timer.name = readFileSync(environment.supportPath + \"/\" + timerFile).toString();\n      const timerFileParts = timerFile.split(\"---\");\n      timer.secondsSet = Number(timerFileParts[1].split(\".\")[0]);\n      const timeStarted = timerFileParts[0].replace(/__/g, \":\");\n      timer.timeLeft = Math.max(0, Math.round(timer.secondsSet - secondsBetweenDates({ d2: timeStarted })));\n      timer.timeEnds = new Date(timeStarted);\n      timer.timeEnds.setSeconds(timer.timeEnds.getSeconds() + timer.secondsSet);\n      setOfTimers.push(timer);\n    }\n  });\n  setOfTimers.sort((a, b) => {\n    return a.timeLeft - b.timeLeft;\n  });\n  return setOfTimers;\n}\n\nfunction renameTimer(timerFile: string, newName: string) {\n  const dataPath = environment.supportPath + \"/\" + timerFile;\n  writeFileSync(dataPath, newName);\n}\n\nfunction ensureCTFileExists() {\n  if (!existsSync(DATAPATH)) {\n    writeFileSync(DATAPATH, JSON.stringify({}));\n  }\n}\n\nfunction createCustomTimer(newTimer: CustomTimer) {\n  ensureCTFileExists();\n  const customTimers = JSON.parse(readFileSync(DATAPATH, \"utf8\"));\n  customTimers[randomUUID()] = newTimer;\n  writeFileSync(DATAPATH, JSON.stringify(customTimers));\n}\n\nfunction readCustomTimers() {\n  ensureCTFileExists();\n  return JSON.parse(readFileSync(DATAPATH, \"utf8\"));\n}\n\nfunction renameCustomTimer(ctID: string, newName: string) {\n  ensureCTFileExists();\n  const customTimers = JSON.parse(readFileSync(DATAPATH, \"utf8\"));\n  customTimers[ctID].name = newName;\n  writeFileSync(DATAPATH, JSON.stringify(customTimers));\n}\n\nfunction deleteCustomTimer(ctID: string) {\n  ensureCTFileExists();\n  const customTimers = JSON.parse(readFileSync(DATAPATH, \"utf8\"));\n  delete customTimers[ctID];\n  writeFileSync(DATAPATH, JSON.stringify(customTimers));\n}\n\nexport {\n  checkForOverlyLoudAlert,\n  createCustomTimer,\n  deleteCustomTimer,\n  ensureCTFileExists,\n  getTimers,\n  readCustomTimers,\n  renameTimer,\n  renameCustomTimer,\n  startTimer,\n  stopTimer,\n};\n", "const formatTime = (seconds: number) => {\n  const hours = Math.floor(seconds / 3600);\n  const mins = String(Math.floor((seconds % 3600) / 60)).padStart(2, \"0\");\n  const secs = String(Math.floor(seconds % 60)).padStart(2, \"0\");\n  return `${hours}:${mins}:${secs}`;\n};\n\nconst formatDateTime = (d: Date) => {\n  const parsedDate = new Date(d);\n  const datevalues = [\n    parsedDate.getFullYear().toString(),\n    parsedDate.getMonth().toString().padStart(2, \"0\"),\n    parsedDate.getDate().toString().padStart(2, \"0\"),\n  ];\n  const timevalues = [parsedDate.getHours(), parsedDate.getMinutes(), parsedDate.getSeconds()].map((x) =>\n    x.toString().padStart(2, \"0\")\n  );\n  const date = datevalues.join(\"-\");\n  const time = timevalues.join(\":\");\n  return `${date} ${time}`;\n};\n\nconst secondsBetweenDates = (args: { d1?: Date | string; d2?: Date | string }) => {\n  args.d1 = args.d1 == \"----\" ? undefined : args.d1;\n  args.d2 = args.d2 == \"----\" ? undefined : args.d2;\n  return (\n    Math.round(\n      (args.d1 ? new Date(args.d1) : new Date()).getTime() - (args.d2 ? new Date(args.d2) : new Date()).getTime()\n    ) / 1000\n  );\n};\n\nexport { formatTime, formatDateTime, secondsBetweenDates };\n"],
  "mappings": "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",
  "names": ["timersMenuBar_exports", "__export", "Command", "__toCommonJS", "import_api", "import_react", "import_api", "import_react", "import_api", "import_child_process", "import_crypto", "import_fs", "import_path", "formatTime", "seconds", "hours", "mins", "secs", "secondsBetweenDates", "args", "DATAPATH", "checkForOverlyLoudAlert", "launchedFromMenuBar", "prefs", "errorMsg", "startTimer", "timeInSeconds", "timerName", "selectedSound", "masterName", "selectedSoundPath", "cmdParts", "afplayString", "dismissFile", "error", "stderr", "formatTime", "stopTimer", "timerFile", "deleteTimerCmd", "deleteDismissCmd", "getTimers", "setOfTimers", "timer", "timerFileParts", "timeStarted", "secondsBetweenDates", "a", "b", "ensureCTFileExists", "DATAPATH", "createCustomTimer", "newTimer", "customTimers", "readCustomTimers", "deleteCustomTimer", "ctID", "ensureCTFileExists", "customTimers", "DATAPATH", "useTimers", "timers", "setTimers", "customTimers", "setCustomTimers", "isLoading", "setIsLoading", "refreshTimers", "ensureCTFileExists", "setOfTimers", "getTimers", "setOfCustomTimers", "readCustomTimers", "seconds", "name", "launchedFromMenuBar", "checkForOverlyLoudAlert", "startTimer", "timer", "t", "stopTimer", "customTimer", "createCustomTimer", "ctID", "deleteCustomTimer", "import_jsx_runtime", "Command", "timers", "customTimers", "isLoading", "refreshTimers", "handleStartTimer", "handleStopTimer", "handleStartCT", "useTimers", "prefs", "getTimerMenuBarTitle", "formatTime", "timer", "b", "ctID"]
}
