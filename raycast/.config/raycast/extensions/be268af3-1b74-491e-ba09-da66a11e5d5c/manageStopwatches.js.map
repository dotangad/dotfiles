{
  "version": 3,
  "sources": ["../src/manageStopwatches.tsx", "../src/hooks/useStopwatches.ts", "../src/formatUtils.ts", "../src/stopwatchUtils.ts", "../src/RenameView.tsx", "../src/timerUtils.ts"],
  "sourcesContent": ["import { Action, ActionPanel, Color, Icon, List, useNavigation } from \"@raycast/api\";\nimport { useEffect } from \"react\";\nimport useStopwatches from \"./hooks/useStopwatches\";\nimport RenameView from \"./RenameView\";\nimport { formatTime, formatDateTime } from \"./formatUtils\";\nimport { Stopwatch } from \"./types\";\n\nexport default function Command() {\n  const {\n    stopwatches,\n    isLoading,\n    refreshSWes,\n    handleRestartSW,\n    handleStartSW,\n    handleStopSW,\n    handlePauseSW,\n    handleUnpauseSW,\n  } = useStopwatches();\n  const { push } = useNavigation();\n\n  useEffect(() => {\n    refreshSWes();\n    setInterval(() => {\n      refreshSWes();\n    }, 1000);\n  }, []);\n\n  const pausedTag = { tag: { value: \"Paused\", color: Color.Red } };\n  const unpausedTag = { tag: { value: \"Running\", color: Color.Green } };\n  const pausedIcon = { source: Icon.Clock, tintColor: Color.Red };\n  const unpausedIcon = { source: Icon.Clock, tintColor: Color.Green };\n\n  return (\n    <List isLoading={isLoading}>\n      <List.Section\n        title={stopwatches?.length !== 0 && stopwatches != null ? \"Currently Running\" : \"No Stopwatches Running\"}\n      >\n        {stopwatches?.map((sw: Stopwatch) => (\n          <List.Item\n            key={sw.swID}\n            icon={sw.lastPaused == \"----\" ? unpausedIcon : pausedIcon}\n            title={sw.name}\n            subtitle={formatTime(sw.timeElapsed) + \" elapsed\"}\n            accessories={[\n              { text: \"Started at \" + formatDateTime(sw.timeStarted) },\n              sw.lastPaused == \"----\" ? unpausedTag : pausedTag,\n            ]}\n            actions={\n              <ActionPanel>\n                {sw.lastPaused == \"----\" ? (\n                  <Action title=\"Pause Stopwatch\" onAction={() => handlePauseSW(sw.swID)} />\n                ) : (\n                  <Action title=\"Unpause Stopwatch\" onAction={() => handleUnpauseSW(sw.swID)} />\n                )}\n                <Action\n                  title=\"Rename Stopwatch\"\n                  onAction={() => push(<RenameView currentName={sw.name} originalFile={\"stopwatch\"} ctID={sw.swID} />)}\n                />\n                <Action.CopyToClipboard\n                  title=\"Copy Current Time\"\n                  shortcut={{ modifiers: [\"cmd\"], key: \"c\" }}\n                  content={formatTime(sw.timeElapsed)}\n                />\n                <Action\n                  title=\"Restart Stopwatch\"\n                  shortcut={{ modifiers: [\"cmd\"], key: \"r\" }}\n                  onAction={() => handleRestartSW(sw)}\n                />\n                <Action\n                  title=\"Stop Stopwatch\"\n                  shortcut={{ modifiers: [\"ctrl\"], key: \"x\" }}\n                  onAction={() => handleStopSW(sw)}\n                />\n              </ActionPanel>\n            }\n          />\n        ))}\n        <List.Item\n          key={0}\n          icon={Icon.Clock}\n          title={\"Create a new stopwatch\"}\n          subtitle={\"Press Enter to start a stopwatch\"}\n          actions={\n            <ActionPanel>\n              <Action title=\"Start Stopwatch\" onAction={() => handleStartSW()} />\n            </ActionPanel>\n          }\n        />\n      </List.Section>\n    </List>\n  );\n}\n", "import { Clipboard, getPreferenceValues } from \"@raycast/api\";\nimport { useState } from \"react\";\nimport { formatTime } from \"../formatUtils\";\nimport { getStopwatches, pauseStopwatch, startStopwatch, stopStopwatch, unpauseStopwatch } from \"../stopwatchUtils\";\nimport { Stopwatch } from \"../types\";\n\nexport default function useStopwatches() {\n  const [stopwatches, setStopwatches] = useState<Stopwatch[] | undefined>(undefined);\n  const [isLoading, setIsLoading] = useState<boolean>(stopwatches === undefined);\n\n  const refreshSWes = () => {\n    const setOfStopwatches: Stopwatch[] = getStopwatches();\n    setStopwatches(setOfStopwatches);\n    setIsLoading(false);\n  };\n\n  const handleStartSW = (swName = \"Untitled\") => {\n    startStopwatch(swName);\n    refreshSWes();\n  };\n\n  const handlePauseSW = (swID: string) => {\n    pauseStopwatch(swID);\n    refreshSWes();\n  };\n\n  const handleUnpauseSW = (swID: string) => {\n    unpauseStopwatch(swID);\n    refreshSWes();\n  };\n\n  const handleStopSW = (stopwatch: Stopwatch) => {\n    const prefs = getPreferenceValues();\n    if (prefs.copyOnSwStop) {\n      Clipboard.copy(formatTime(stopwatch.timeElapsed));\n    }\n    stopStopwatch(stopwatch.swID);\n    refreshSWes();\n  };\n\n  const handleRestartSW = (stopwatch: Stopwatch) => {\n    handleStopSW(stopwatch);\n    handleStartSW(stopwatch.name);\n    refreshSWes();\n  };\n\n  return {\n    stopwatches,\n    isLoading,\n    refreshSWes,\n    handleRestartSW,\n    handleStartSW,\n    handleStopSW,\n    handlePauseSW,\n    handleUnpauseSW,\n  };\n}\n", "const formatTime = (seconds: number) => {\n  const hours = Math.floor(seconds / 3600);\n  const mins = String(Math.floor((seconds % 3600) / 60)).padStart(2, \"0\");\n  const secs = String(Math.floor(seconds % 60)).padStart(2, \"0\");\n  return `${hours}:${mins}:${secs}`;\n};\n\nconst formatDateTime = (d: Date) => {\n  const parsedDate = new Date(d);\n  const datevalues = [\n    parsedDate.getFullYear().toString(),\n    parsedDate.getMonth().toString().padStart(2, \"0\"),\n    parsedDate.getDate().toString().padStart(2, \"0\"),\n  ];\n  const timevalues = [parsedDate.getHours(), parsedDate.getMinutes(), parsedDate.getSeconds()].map((x) =>\n    x.toString().padStart(2, \"0\")\n  );\n  const date = datevalues.join(\"-\");\n  const time = timevalues.join(\":\");\n  return `${date} ${time}`;\n};\n\nconst secondsBetweenDates = (args: { d1?: Date | string; d2?: Date | string }) => {\n  args.d1 = args.d1 == \"----\" ? undefined : args.d1;\n  args.d2 = args.d2 == \"----\" ? undefined : args.d2;\n  return (\n    Math.round(\n      (args.d1 ? new Date(args.d1) : new Date()).getTime() - (args.d2 ? new Date(args.d2) : new Date()).getTime()\n    ) / 1000\n  );\n};\n\nexport { formatTime, formatDateTime, secondsBetweenDates };\n", "import { environment, popToRoot, showHUD } from \"@raycast/api\";\nimport { execSync } from \"child_process\";\nimport { randomUUID } from \"crypto\";\nimport { existsSync, readdirSync, readFileSync, writeFileSync } from \"fs\";\nimport { extname } from \"path\";\nimport { secondsBetweenDates } from \"./formatUtils\";\nimport { Stopwatch } from \"./types\";\n\nconst SWPATH = environment.supportPath + \"/raycast-stopwatches.json\";\n\nconst ensureSWFileExists = () => {\n  if (!existsSync(SWPATH) || readFileSync(SWPATH).toString() == \"\") {\n    writeFileSync(SWPATH, \"[]\");\n  }\n};\n\nconst initStopwatch = (swName = \"\"): Stopwatch => {\n  return {\n    name: swName,\n    swID: randomUUID(),\n    timeStarted: new Date(),\n    timeElapsed: -99,\n    lastPaused: \"----\",\n    pauseElapsed: 0,\n  };\n};\n\nconst processStopwatches = (swSet: Stopwatch[]) => {\n  swSet.map((x) => {\n    if (x.lastPaused != \"----\") {\n      x.timeElapsed = Math.max(0, secondsBetweenDates({ d1: x.lastPaused, d2: x.timeStarted }) - x.pauseElapsed);\n    } else {\n      const rawElapsedTime = Math.max(0, secondsBetweenDates({ d2: x.timeStarted }));\n      x.timeElapsed = rawElapsedTime - x.pauseElapsed;\n    }\n  });\n  return swSet;\n};\n\nconst getStopwatches = () => {\n  ensureSWFileExists();\n  const rawStopwatches: Stopwatch[] = JSON.parse(readFileSync(SWPATH).toString());\n  const fullStopwatchSet = cleanUpOldStopwatches(rawStopwatches);\n  const setOfStopwatches = processStopwatches(fullStopwatchSet);\n  setOfStopwatches.sort((a, b) => {\n    return a.timeElapsed - b.timeElapsed;\n  });\n  return setOfStopwatches;\n};\n\nconst startStopwatch = async (swName = \"Untitled\") => {\n  ensureSWFileExists();\n  const swStore: Stopwatch[] = JSON.parse(readFileSync(SWPATH).toString());\n  const newTimer = initStopwatch(swName);\n  swStore.push(newTimer);\n  writeFileSync(SWPATH, JSON.stringify(swStore));\n\n  popToRoot();\n  await showHUD(`Stopwatch \"${swName}\" started! \uD83C\uDF89`);\n};\n\nconst pauseStopwatch = (swToPause: string) => {\n  ensureSWFileExists();\n  let swStore: Stopwatch[] = JSON.parse(readFileSync(SWPATH).toString());\n  swStore = swStore.map((s) => (s.swID == swToPause ? { ...s, lastPaused: new Date() } : s));\n  writeFileSync(SWPATH, JSON.stringify(swStore));\n};\n\nconst unpauseStopwatch = (swToUnpause: string) => {\n  ensureSWFileExists();\n  let swStore: Stopwatch[] = JSON.parse(readFileSync(SWPATH).toString());\n  swStore = swStore.map((s) =>\n    s.swID == swToUnpause\n      ? {\n          ...s,\n          pauseElapsed: s.pauseElapsed + secondsBetweenDates({ d2: s.lastPaused }),\n          lastPaused: \"----\",\n        }\n      : s\n  );\n  writeFileSync(SWPATH, JSON.stringify(swStore));\n};\n\nconst stopStopwatch = (swToDelete: string) => {\n  ensureSWFileExists();\n  let swStore: Stopwatch[] = JSON.parse(readFileSync(SWPATH).toString());\n  swStore = swStore.filter((s: Stopwatch) => s.swID !== swToDelete);\n  writeFileSync(SWPATH, JSON.stringify(swStore));\n};\n\nconst cleanUpOldStopwatches = (newStore: Stopwatch[]) => {\n  const files = readdirSync(environment.supportPath);\n  files.forEach((swFile: string) => {\n    if (extname(swFile) == \".stopwatch\") {\n      const stopwatch = initStopwatch(readFileSync(environment.supportPath + \"/\" + swFile).toString());\n      const timeStarted = swFile.replace(/__/g, \":\").replace(\".stopwatch\", \"\");\n      stopwatch.timeStarted = new Date(timeStarted);\n      stopwatch.timeElapsed = Math.max(0, secondsBetweenDates({}));\n      execSync(`rm \"${environment.supportPath}/${swFile}\"`);\n      newStore.push(stopwatch);\n    }\n  });\n  writeFileSync(SWPATH, JSON.stringify(newStore));\n  return newStore;\n};\n\nconst renameStopwatch = (swID: string, newName: string) => {\n  ensureSWFileExists();\n  const stopwatches: Stopwatch[] = JSON.parse(readFileSync(SWPATH, \"utf8\"));\n  const renamedSW = stopwatches.map((x) => (x.swID == swID ? { ...x, name: newName } : x));\n  writeFileSync(SWPATH, JSON.stringify(renamedSW));\n};\n\nexport { getStopwatches, pauseStopwatch, unpauseStopwatch, startStopwatch, stopStopwatch, renameStopwatch };\n", "import { Action, ActionPanel, Form, popToRoot, Toast } from \"@raycast/api\";\nimport { renameStopwatch } from \"./stopwatchUtils\";\nimport { renameCustomTimer, renameTimer } from \"./timerUtils\";\n\nexport default function RenameView(props: { currentName: string; originalFile: string; ctID: string | null }) {\n  const handleSubmit = (newName: string) => {\n    if (newName === \"\" || newName === props.currentName) {\n      const toast = new Toast({ style: Toast.Style.Failure, title: \"No new name given!\" });\n      toast.show();\n    } else {\n      popToRoot();\n      switch (props.originalFile) {\n        case \"customTimer\":\n          renameCustomTimer(props.ctID ? props.ctID : \"-99\", newName);\n          break;\n        case \"stopwatch\":\n          renameStopwatch(props.ctID ? props.ctID : \"-99\", newName);\n          break;\n        default:\n          renameTimer(props.originalFile, newName);\n          break;\n      }\n      const toast = new Toast({ style: Toast.Style.Success, title: `Renamed to ${newName}!` });\n      toast.show();\n    }\n  };\n\n  return (\n    <Form\n      actions={\n        <ActionPanel>\n          <Action.SubmitForm title=\"Rename\" onSubmit={(values: { newName: string }) => handleSubmit(values.newName)} />\n        </ActionPanel>\n      }\n    >\n      <Form.TextField id=\"newName\" title=\"New name\" placeholder={props.currentName} />\n    </Form>\n  );\n}\n", "import { environment, getPreferenceValues, popToRoot, showHUD, showToast, Toast } from \"@raycast/api\";\nimport { exec, execSync } from \"child_process\";\nimport { randomUUID } from \"crypto\";\nimport { existsSync, readdirSync, readFileSync, writeFileSync } from \"fs\";\nimport { extname } from \"path\";\nimport { CustomTimer, Preferences, Timer } from \"./types\";\nimport { formatTime, secondsBetweenDates } from \"./formatUtils\";\n\nconst DATAPATH = environment.supportPath + \"/customTimers.json\";\n\nconst checkForOverlyLoudAlert = (launchedFromMenuBar = false) => {\n  const prefs = getPreferenceValues<Preferences>();\n  if (parseFloat(prefs.volumeSetting) > 5.0) {\n    const errorMsg = \"\u26A0\uFE0F Timer alert volume should not be louder than 5 (it can get quite loud!)\";\n    if (launchedFromMenuBar) {\n      showHUD(errorMsg);\n    } else {\n      showToast({ style: Toast.Style.Failure, title: errorMsg });\n    }\n    return false;\n  }\n  return true;\n};\n\nasync function startTimer(timeInSeconds: number, timerName = \"Untitled\", selectedSound = \"default\") {\n  const fileName = environment.supportPath + \"/\" + new Date().toISOString() + \"---\" + timeInSeconds + \".timer\";\n  const masterName = fileName.replace(/:/g, \"__\");\n  writeFileSync(masterName, timerName);\n\n  const prefs = getPreferenceValues<Preferences>();\n  const selectedSoundPath = `${\n    environment.assetsPath + \"/\" + (selectedSound === \"default\" ? prefs.selectedSound : selectedSound)\n  }`;\n  const cmdParts = [`sleep ${timeInSeconds}`];\n  cmdParts.push(\n    `if [ -f \"${masterName}\" ]; then osascript -e 'display notification \"Timer \\\\\"${timerName}\\\\\" complete\" with title \"Ding!\"'`\n  );\n  const afplayString = `afplay \"${selectedSoundPath}\" --volume ${prefs.volumeSetting.replace(\",\", \".\")}`;\n  if (prefs.selectedSound === \"speak_timer_name\") {\n    cmdParts.push(`say \"${timerName}\"`);\n  } else {\n    cmdParts.push(afplayString);\n  }\n  if (prefs.ringContinuously) {\n    const dismissFile = `${masterName}`.replace(\".timer\", \".dismiss\");\n    writeFileSync(dismissFile, \".dismiss file for Timers\");\n    cmdParts.push(`while [ -f \"${dismissFile}\" ]; do ${afplayString}; done`);\n  }\n  cmdParts.push(`rm \"${masterName}\"; else echo \"Timer deleted\"; fi`);\n  exec(cmdParts.join(\" && \"), (error, stderr) => {\n    if (error) {\n      console.log(`error: ${error.message}`);\n      return;\n    }\n    if (stderr) {\n      console.log(`stderr: ${stderr}`);\n      return;\n    }\n  });\n  popToRoot();\n  await showHUD(`Timer \"${timerName}\" started for ${formatTime(timeInSeconds)}! \uD83C\uDF89`);\n}\n\nfunction stopTimer(timerFile: string) {\n  const deleteTimerCmd = `if [ -f \"${timerFile}\" ]; then rm \"${timerFile}\"; else echo \"Timer deleted\"; fi`;\n  const dismissFile = timerFile.replace(\".timer\", \".dismiss\");\n  const deleteDismissCmd = `if [ -f \"${dismissFile}\" ]; then rm \"${dismissFile}\"; else echo \"Timer deleted\"; fi`;\n  execSync(deleteTimerCmd);\n  execSync(deleteDismissCmd);\n}\n\nfunction getTimers() {\n  const setOfTimers: Timer[] = [];\n  const files = readdirSync(environment.supportPath);\n  files.forEach((timerFile: string) => {\n    if (extname(timerFile) == \".timer\") {\n      const timer: Timer = {\n        name: \"\",\n        secondsSet: -99,\n        timeLeft: -99,\n        originalFile: timerFile,\n        timeEnds: new Date(),\n      };\n      timer.name = readFileSync(environment.supportPath + \"/\" + timerFile).toString();\n      const timerFileParts = timerFile.split(\"---\");\n      timer.secondsSet = Number(timerFileParts[1].split(\".\")[0]);\n      const timeStarted = timerFileParts[0].replace(/__/g, \":\");\n      timer.timeLeft = Math.max(0, Math.round(timer.secondsSet - secondsBetweenDates({ d2: timeStarted })));\n      timer.timeEnds = new Date(timeStarted);\n      timer.timeEnds.setSeconds(timer.timeEnds.getSeconds() + timer.secondsSet);\n      setOfTimers.push(timer);\n    }\n  });\n  setOfTimers.sort((a, b) => {\n    return a.timeLeft - b.timeLeft;\n  });\n  return setOfTimers;\n}\n\nfunction renameTimer(timerFile: string, newName: string) {\n  const dataPath = environment.supportPath + \"/\" + timerFile;\n  writeFileSync(dataPath, newName);\n}\n\nfunction ensureCTFileExists() {\n  if (!existsSync(DATAPATH)) {\n    writeFileSync(DATAPATH, JSON.stringify({}));\n  }\n}\n\nfunction createCustomTimer(newTimer: CustomTimer) {\n  ensureCTFileExists();\n  const customTimers = JSON.parse(readFileSync(DATAPATH, \"utf8\"));\n  customTimers[randomUUID()] = newTimer;\n  writeFileSync(DATAPATH, JSON.stringify(customTimers));\n}\n\nfunction readCustomTimers() {\n  ensureCTFileExists();\n  return JSON.parse(readFileSync(DATAPATH, \"utf8\"));\n}\n\nfunction renameCustomTimer(ctID: string, newName: string) {\n  ensureCTFileExists();\n  const customTimers = JSON.parse(readFileSync(DATAPATH, \"utf8\"));\n  customTimers[ctID].name = newName;\n  writeFileSync(DATAPATH, JSON.stringify(customTimers));\n}\n\nfunction deleteCustomTimer(ctID: string) {\n  ensureCTFileExists();\n  const customTimers = JSON.parse(readFileSync(DATAPATH, \"utf8\"));\n  delete customTimers[ctID];\n  writeFileSync(DATAPATH, JSON.stringify(customTimers));\n}\n\nexport {\n  checkForOverlyLoudAlert,\n  createCustomTimer,\n  deleteCustomTimer,\n  ensureCTFileExists,\n  getTimers,\n  readCustomTimers,\n  renameTimer,\n  renameCustomTimer,\n  startTimer,\n  stopTimer,\n};\n"],
  "mappings": "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",
  "names": ["manageStopwatches_exports", "__export", "Command", "__toCommonJS", "import_api", "import_react", "import_api", "import_react", "formatTime", "seconds", "hours", "mins", "secs", "formatDateTime", "d", "parsedDate", "datevalues", "timevalues", "x", "date", "time", "secondsBetweenDates", "args", "import_api", "import_child_process", "import_crypto", "import_fs", "import_path", "SWPATH", "ensureSWFileExists", "initStopwatch", "swName", "processStopwatches", "swSet", "x", "secondsBetweenDates", "rawElapsedTime", "getStopwatches", "rawStopwatches", "fullStopwatchSet", "cleanUpOldStopwatches", "setOfStopwatches", "a", "b", "startStopwatch", "swStore", "newTimer", "pauseStopwatch", "swToPause", "s", "unpauseStopwatch", "swToUnpause", "stopStopwatch", "swToDelete", "newStore", "swFile", "stopwatch", "timeStarted", "renameStopwatch", "swID", "newName", "renamedSW", "useStopwatches", "stopwatches", "setStopwatches", "isLoading", "setIsLoading", "refreshSWes", "setOfStopwatches", "getStopwatches", "handleStartSW", "swName", "startStopwatch", "handlePauseSW", "swID", "pauseStopwatch", "handleUnpauseSW", "unpauseStopwatch", "handleStopSW", "stopwatch", "formatTime", "stopStopwatch", "import_api", "import_api", "import_fs", "DATAPATH", "renameTimer", "timerFile", "newName", "dataPath", "ensureCTFileExists", "DATAPATH", "renameCustomTimer", "ctID", "newName", "ensureCTFileExists", "customTimers", "DATAPATH", "import_jsx_runtime", "RenameView", "props", "handleSubmit", "newName", "renameCustomTimer", "renameStopwatch", "renameTimer", "values", "import_jsx_runtime", "Command", "stopwatches", "isLoading", "refreshSWes", "handleRestartSW", "handleStartSW", "handleStopSW", "handlePauseSW", "handleUnpauseSW", "useStopwatches", "push", "pausedTag", "unpausedTag", "pausedIcon", "unpausedIcon", "sw", "formatTime", "formatDateTime", "RenameView"]
}
