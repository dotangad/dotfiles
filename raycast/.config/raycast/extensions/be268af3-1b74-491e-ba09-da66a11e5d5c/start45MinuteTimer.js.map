{
  "version": 3,
  "sources": ["../src/start45MinuteTimer.ts", "../src/timerUtils.ts", "../src/formatUtils.ts"],
  "sourcesContent": ["import { closeMainWindow } from \"@raycast/api\";\nimport { checkForOverlyLoudAlert, startTimer } from \"./timerUtils\";\n\nexport default async () => {\n  if (!checkForOverlyLoudAlert()) return;\n  await closeMainWindow();\n  startTimer(60 * 45, \"45 Minute Timer\");\n};\n", "import { environment, getPreferenceValues, popToRoot, showHUD, showToast, Toast } from \"@raycast/api\";\nimport { exec, execSync } from \"child_process\";\nimport { randomUUID } from \"crypto\";\nimport { existsSync, readdirSync, readFileSync, writeFileSync } from \"fs\";\nimport { extname } from \"path\";\nimport { CustomTimer, Preferences, Timer } from \"./types\";\nimport { formatTime, secondsBetweenDates } from \"./formatUtils\";\n\nconst DATAPATH = environment.supportPath + \"/customTimers.json\";\n\nconst checkForOverlyLoudAlert = (launchedFromMenuBar = false) => {\n  const prefs = getPreferenceValues<Preferences>();\n  if (parseFloat(prefs.volumeSetting) > 5.0) {\n    const errorMsg = \"\u26A0\uFE0F Timer alert volume should not be louder than 5 (it can get quite loud!)\";\n    if (launchedFromMenuBar) {\n      showHUD(errorMsg);\n    } else {\n      showToast({ style: Toast.Style.Failure, title: errorMsg });\n    }\n    return false;\n  }\n  return true;\n};\n\nasync function startTimer(timeInSeconds: number, timerName = \"Untitled\", selectedSound = \"default\") {\n  const fileName = environment.supportPath + \"/\" + new Date().toISOString() + \"---\" + timeInSeconds + \".timer\";\n  const masterName = fileName.replace(/:/g, \"__\");\n  writeFileSync(masterName, timerName);\n\n  const prefs = getPreferenceValues<Preferences>();\n  const selectedSoundPath = `${\n    environment.assetsPath + \"/\" + (selectedSound === \"default\" ? prefs.selectedSound : selectedSound)\n  }`;\n  const cmdParts = [`sleep ${timeInSeconds}`];\n  cmdParts.push(\n    `if [ -f \"${masterName}\" ]; then osascript -e 'display notification \"Timer \\\\\"${timerName}\\\\\" complete\" with title \"Ding!\"'`\n  );\n  const afplayString = `afplay \"${selectedSoundPath}\" --volume ${prefs.volumeSetting.replace(\",\", \".\")}`;\n  if (prefs.selectedSound === \"speak_timer_name\") {\n    cmdParts.push(`say \"${timerName}\"`);\n  } else {\n    cmdParts.push(afplayString);\n  }\n  if (prefs.ringContinuously) {\n    const dismissFile = `${masterName}`.replace(\".timer\", \".dismiss\");\n    writeFileSync(dismissFile, \".dismiss file for Timers\");\n    cmdParts.push(`while [ -f \"${dismissFile}\" ]; do ${afplayString}; done`);\n  }\n  cmdParts.push(`rm \"${masterName}\"; else echo \"Timer deleted\"; fi`);\n  exec(cmdParts.join(\" && \"), (error, stderr) => {\n    if (error) {\n      console.log(`error: ${error.message}`);\n      return;\n    }\n    if (stderr) {\n      console.log(`stderr: ${stderr}`);\n      return;\n    }\n  });\n  popToRoot();\n  await showHUD(`Timer \"${timerName}\" started for ${formatTime(timeInSeconds)}! \uD83C\uDF89`);\n}\n\nfunction stopTimer(timerFile: string) {\n  const deleteTimerCmd = `if [ -f \"${timerFile}\" ]; then rm \"${timerFile}\"; else echo \"Timer deleted\"; fi`;\n  const dismissFile = timerFile.replace(\".timer\", \".dismiss\");\n  const deleteDismissCmd = `if [ -f \"${dismissFile}\" ]; then rm \"${dismissFile}\"; else echo \"Timer deleted\"; fi`;\n  execSync(deleteTimerCmd);\n  execSync(deleteDismissCmd);\n}\n\nfunction getTimers() {\n  const setOfTimers: Timer[] = [];\n  const files = readdirSync(environment.supportPath);\n  files.forEach((timerFile: string) => {\n    if (extname(timerFile) == \".timer\") {\n      const timer: Timer = {\n        name: \"\",\n        secondsSet: -99,\n        timeLeft: -99,\n        originalFile: timerFile,\n        timeEnds: new Date(),\n      };\n      timer.name = readFileSync(environment.supportPath + \"/\" + timerFile).toString();\n      const timerFileParts = timerFile.split(\"---\");\n      timer.secondsSet = Number(timerFileParts[1].split(\".\")[0]);\n      const timeStarted = timerFileParts[0].replace(/__/g, \":\");\n      timer.timeLeft = Math.max(0, Math.round(timer.secondsSet - secondsBetweenDates({ d2: timeStarted })));\n      timer.timeEnds = new Date(timeStarted);\n      timer.timeEnds.setSeconds(timer.timeEnds.getSeconds() + timer.secondsSet);\n      setOfTimers.push(timer);\n    }\n  });\n  setOfTimers.sort((a, b) => {\n    return a.timeLeft - b.timeLeft;\n  });\n  return setOfTimers;\n}\n\nfunction renameTimer(timerFile: string, newName: string) {\n  const dataPath = environment.supportPath + \"/\" + timerFile;\n  writeFileSync(dataPath, newName);\n}\n\nfunction ensureCTFileExists() {\n  if (!existsSync(DATAPATH)) {\n    writeFileSync(DATAPATH, JSON.stringify({}));\n  }\n}\n\nfunction createCustomTimer(newTimer: CustomTimer) {\n  ensureCTFileExists();\n  const customTimers = JSON.parse(readFileSync(DATAPATH, \"utf8\"));\n  customTimers[randomUUID()] = newTimer;\n  writeFileSync(DATAPATH, JSON.stringify(customTimers));\n}\n\nfunction readCustomTimers() {\n  ensureCTFileExists();\n  return JSON.parse(readFileSync(DATAPATH, \"utf8\"));\n}\n\nfunction renameCustomTimer(ctID: string, newName: string) {\n  ensureCTFileExists();\n  const customTimers = JSON.parse(readFileSync(DATAPATH, \"utf8\"));\n  customTimers[ctID].name = newName;\n  writeFileSync(DATAPATH, JSON.stringify(customTimers));\n}\n\nfunction deleteCustomTimer(ctID: string) {\n  ensureCTFileExists();\n  const customTimers = JSON.parse(readFileSync(DATAPATH, \"utf8\"));\n  delete customTimers[ctID];\n  writeFileSync(DATAPATH, JSON.stringify(customTimers));\n}\n\nexport {\n  checkForOverlyLoudAlert,\n  createCustomTimer,\n  deleteCustomTimer,\n  ensureCTFileExists,\n  getTimers,\n  readCustomTimers,\n  renameTimer,\n  renameCustomTimer,\n  startTimer,\n  stopTimer,\n};\n", "const formatTime = (seconds: number) => {\n  const hours = Math.floor(seconds / 3600);\n  const mins = String(Math.floor((seconds % 3600) / 60)).padStart(2, \"0\");\n  const secs = String(Math.floor(seconds % 60)).padStart(2, \"0\");\n  return `${hours}:${mins}:${secs}`;\n};\n\nconst formatDateTime = (d: Date) => {\n  const parsedDate = new Date(d);\n  const datevalues = [\n    parsedDate.getFullYear().toString(),\n    parsedDate.getMonth().toString().padStart(2, \"0\"),\n    parsedDate.getDate().toString().padStart(2, \"0\"),\n  ];\n  const timevalues = [parsedDate.getHours(), parsedDate.getMinutes(), parsedDate.getSeconds()].map((x) =>\n    x.toString().padStart(2, \"0\")\n  );\n  const date = datevalues.join(\"-\");\n  const time = timevalues.join(\":\");\n  return `${date} ${time}`;\n};\n\nconst secondsBetweenDates = (args: { d1?: Date | string; d2?: Date | string }) => {\n  args.d1 = args.d1 == \"----\" ? undefined : args.d1;\n  args.d2 = args.d2 == \"----\" ? undefined : args.d2;\n  return (\n    Math.round(\n      (args.d1 ? new Date(args.d1) : new Date()).getTime() - (args.d2 ? new Date(args.d2) : new Date()).getTime()\n    ) / 1000\n  );\n};\n\nexport { formatTime, formatDateTime, secondsBetweenDates };\n"],
  "mappings": "yaAAA,IAAAA,EAAA,GAAAC,EAAAD,EAAA,aAAAE,IAAA,eAAAC,EAAAH,GAAA,IAAAI,EAAgC,wBCAhC,IAAAC,EAAuF,wBACvFC,EAA+B,yBAE/B,IAAAC,EAAqE,cCHrE,IAAMC,EAAcC,GAAoB,CACtC,IAAMC,EAAQ,KAAK,MAAMD,EAAU,IAAI,EACjCE,EAAO,OAAO,KAAK,MAAOF,EAAU,KAAQ,EAAE,CAAC,EAAE,SAAS,EAAG,GAAG,EAChEG,EAAO,OAAO,KAAK,MAAMH,EAAU,EAAE,CAAC,EAAE,SAAS,EAAG,GAAG,EAC7D,MAAO,GAAGC,KAASC,KAAQC,GAC7B,EDGA,IAAMC,EAAW,cAAY,YAAc,qBAErCC,EAA0B,CAACC,EAAsB,KAAU,CAC/D,IAAMC,KAAQ,uBAAiC,EAC/C,GAAI,WAAWA,EAAM,aAAa,EAAI,EAAK,CACzC,IAAMC,EAAW,uFACjB,OAAIF,KACF,WAAQE,CAAQ,KAEhB,aAAU,CAAE,MAAO,QAAM,MAAM,QAAS,MAAOA,CAAS,CAAC,EAEpD,GAET,MAAO,EACT,EAEA,eAAeC,EAAWC,EAAuBC,EAAY,WAAYC,EAAgB,UAAW,CAElG,IAAMC,GADW,cAAY,YAAc,IAAM,IAAI,KAAK,EAAE,YAAY,EAAI,MAAQH,EAAgB,UACxE,QAAQ,KAAM,IAAI,KAC9C,iBAAcG,EAAYF,CAAS,EAEnC,IAAMJ,KAAQ,uBAAiC,EACzCO,EAAoB,GACxB,cAAY,WAAa,KAAOF,IAAkB,UAAYL,EAAM,cAAgBK,KAEhFG,EAAW,CAAC,SAASL,GAAe,EAC1CK,EAAS,KACP,YAAYF,2DAAoEF,oCAClF,EACA,IAAMK,EAAe,WAAWF,eAA+BP,EAAM,cAAc,QAAQ,IAAK,GAAG,IAMnG,GALIA,EAAM,gBAAkB,mBAC1BQ,EAAS,KAAK,QAAQJ,IAAY,EAElCI,EAAS,KAAKC,CAAY,EAExBT,EAAM,iBAAkB,CAC1B,IAAMU,EAAc,GAAGJ,IAAa,QAAQ,SAAU,UAAU,KAChE,iBAAcI,EAAa,0BAA0B,EACrDF,EAAS,KAAK,eAAeE,YAAsBD,SAAoB,EAEzED,EAAS,KAAK,OAAOF,mCAA4C,KACjE,QAAKE,EAAS,KAAK,MAAM,EAAG,CAACG,EAAOC,IAAW,CAC7C,GAAID,EAAO,CACT,QAAQ,IAAI,UAAUA,EAAM,SAAS,EACrC,OAEF,GAAIC,EAAQ,CACV,QAAQ,IAAI,WAAWA,GAAQ,EAC/B,OAEJ,CAAC,KACD,aAAU,EACV,QAAM,WAAQ,UAAUR,kBAA0BS,EAAWV,CAAa,cAAO,CACnF,CD1DA,IAAOW,EAAQ,SAAY,CACpBC,EAAwB,IAC7B,QAAM,mBAAgB,EACtBC,EAAW,GAAK,GAAI,iBAAiB,EACvC",
  "names": ["start45MinuteTimer_exports", "__export", "start45MinuteTimer_default", "__toCommonJS", "import_api", "import_api", "import_child_process", "import_fs", "formatTime", "seconds", "hours", "mins", "secs", "DATAPATH", "checkForOverlyLoudAlert", "launchedFromMenuBar", "prefs", "errorMsg", "startTimer", "timeInSeconds", "timerName", "selectedSound", "masterName", "selectedSoundPath", "cmdParts", "afplayString", "dismissFile", "error", "stderr", "formatTime", "start45MinuteTimer_default", "checkForOverlyLoudAlert", "startTimer"]
}
