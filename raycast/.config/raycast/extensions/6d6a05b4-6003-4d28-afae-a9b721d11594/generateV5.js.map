{
  "version": 3,
  "sources": ["../src/generateV5.tsx", "../node_modules/uuid/dist/esm-node/regex.js", "../node_modules/uuid/dist/esm-node/validate.js", "../node_modules/uuid/dist/esm-node/stringify.js", "../node_modules/uuid/dist/esm-node/parse.js", "../node_modules/uuid/dist/esm-node/v35.js", "../node_modules/uuid/dist/esm-node/sha1.js", "../node_modules/uuid/dist/esm-node/v5.js"],
  "sourcesContent": ["import { showHUD, Clipboard, getPreferenceValues, showToast, Toast } from \"@raycast/api\";\nimport { v5 as uuidV5, validate as uuidValidate } from \"uuid\";\n\ninterface UUIDV5Arguments {\n  numberOfUUIDsToGenerate: string;\n  name: string;\n}\n\ninterface Preferences {\n  upperCaseLetters: boolean;\n  uuidNamespace: string;\n  defaultAction: string;\n}\n\n// don't want to cause a heap error, so cap it \uD83D\uDE31\nconst UUID_MAX_NUMBER = 10000;\n\nexport default async (props: { arguments: UUIDV5Arguments }) => {\n  let { numberOfUUIDsToGenerate } = props.arguments;\n  const { name } = props.arguments;\n  const { upperCaseLetters, uuidNamespace, defaultAction } = getPreferenceValues<Preferences>();\n\n  if (!numberOfUUIDsToGenerate) {\n    numberOfUUIDsToGenerate = \"1\";\n  }\n\n  try {\n    const parseableNumber = parseInt(numberOfUUIDsToGenerate, 10);\n\n    if (isNaN(parseableNumber)) {\n      throw new Error(\"INVALID_NUMBER\");\n    }\n\n    if (!uuidValidate(uuidNamespace)) {\n      throw new Error(\"INVALID_NAMESPACE\");\n    }\n\n    // safe?\n    if (parseableNumber <= UUID_MAX_NUMBER) {\n      let uuids = Array.from(Array(parseableNumber)).map(() => uuidV5(name, uuidNamespace));\n      if (upperCaseLetters) {\n        uuids = uuids.map((element) => element.toUpperCase());\n      }\n\n      if (defaultAction === \"copy\") {\n        await Clipboard.copy(uuids.join(\"\\r\\n\"));\n      } else if (defaultAction === \"paste\") {\n        await Clipboard.paste(uuids.join(\"\\r\\n\"));\n      }\n      const action = defaultAction === \"copy\" ? \"Copied\" : \"Pasted\";\n      const successMessage = uuids.length > 1 ? `${action} ${uuids.length} new UUIDs.` : `${action} new UUID: ${uuids}`;\n      await showHUD(`\u2705 ${successMessage}`);\n    } else {\n      await showToast({\n        style: Toast.Style.Failure,\n        title: \"Too many UUIDs requested.\",\n        message: `${parseableNumber} exceeds maximum UUIDs of ${UUID_MAX_NUMBER}. Try a lower number.`,\n      });\n    }\n  } catch (e) {\n    switch ((e as { message: string }).message) {\n      case \"INVALID_NAMESPACE\":\n        await showToast({\n          style: Toast.Style.Failure,\n          title: \"Invalid namespace.\",\n          message: \"An invalid namespace has been defined. A namespace must be a valid UUID.\",\n        });\n        break;\n      case \"INVALID_NUMBER\":\n        await showToast({\n          style: Toast.Style.Failure,\n          title: \"Invalid number.\",\n          message: \"An invalid number has been provided. Try an actual number.\",\n        });\n        break;\n    }\n  }\n};\n", "export default /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;", "import REGEX from './regex.js';\n\nfunction validate(uuid) {\n  return typeof uuid === 'string' && REGEX.test(uuid);\n}\n\nexport default validate;", "import validate from './validate.js';\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\n\nconst byteToHex = [];\n\nfor (let i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).slice(1));\n}\n\nexport function unsafeStringify(arr, offset = 0) {\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  return (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase();\n}\n\nfunction stringify(arr, offset = 0) {\n  const uuid = unsafeStringify(arr, offset); // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n\n  if (!validate(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n\n  return uuid;\n}\n\nexport default stringify;", "import validate from './validate.js';\n\nfunction parse(uuid) {\n  if (!validate(uuid)) {\n    throw TypeError('Invalid UUID');\n  }\n\n  let v;\n  const arr = new Uint8Array(16); // Parse ########-....-....-....-............\n\n  arr[0] = (v = parseInt(uuid.slice(0, 8), 16)) >>> 24;\n  arr[1] = v >>> 16 & 0xff;\n  arr[2] = v >>> 8 & 0xff;\n  arr[3] = v & 0xff; // Parse ........-####-....-....-............\n\n  arr[4] = (v = parseInt(uuid.slice(9, 13), 16)) >>> 8;\n  arr[5] = v & 0xff; // Parse ........-....-####-....-............\n\n  arr[6] = (v = parseInt(uuid.slice(14, 18), 16)) >>> 8;\n  arr[7] = v & 0xff; // Parse ........-....-....-####-............\n\n  arr[8] = (v = parseInt(uuid.slice(19, 23), 16)) >>> 8;\n  arr[9] = v & 0xff; // Parse ........-....-....-....-############\n  // (Use \"/\" to avoid 32-bit truncation when bit-shifting high-order bytes)\n\n  arr[10] = (v = parseInt(uuid.slice(24, 36), 16)) / 0x10000000000 & 0xff;\n  arr[11] = v / 0x100000000 & 0xff;\n  arr[12] = v >>> 24 & 0xff;\n  arr[13] = v >>> 16 & 0xff;\n  arr[14] = v >>> 8 & 0xff;\n  arr[15] = v & 0xff;\n  return arr;\n}\n\nexport default parse;", "import { unsafeStringify } from './stringify.js';\nimport parse from './parse.js';\n\nfunction stringToBytes(str) {\n  str = unescape(encodeURIComponent(str)); // UTF8 escape\n\n  const bytes = [];\n\n  for (let i = 0; i < str.length; ++i) {\n    bytes.push(str.charCodeAt(i));\n  }\n\n  return bytes;\n}\n\nexport const DNS = '6ba7b810-9dad-11d1-80b4-00c04fd430c8';\nexport const URL = '6ba7b811-9dad-11d1-80b4-00c04fd430c8';\nexport default function v35(name, version, hashfunc) {\n  function generateUUID(value, namespace, buf, offset) {\n    var _namespace;\n\n    if (typeof value === 'string') {\n      value = stringToBytes(value);\n    }\n\n    if (typeof namespace === 'string') {\n      namespace = parse(namespace);\n    }\n\n    if (((_namespace = namespace) === null || _namespace === void 0 ? void 0 : _namespace.length) !== 16) {\n      throw TypeError('Namespace must be array-like (16 iterable integer values, 0-255)');\n    } // Compute hash of namespace and value, Per 4.3\n    // Future: Use spread syntax when supported on all platforms, e.g. `bytes =\n    // hashfunc([...namespace, ... value])`\n\n\n    let bytes = new Uint8Array(16 + value.length);\n    bytes.set(namespace);\n    bytes.set(value, namespace.length);\n    bytes = hashfunc(bytes);\n    bytes[6] = bytes[6] & 0x0f | version;\n    bytes[8] = bytes[8] & 0x3f | 0x80;\n\n    if (buf) {\n      offset = offset || 0;\n\n      for (let i = 0; i < 16; ++i) {\n        buf[offset + i] = bytes[i];\n      }\n\n      return buf;\n    }\n\n    return unsafeStringify(bytes);\n  } // Function#name is not settable on some platforms (#270)\n\n\n  try {\n    generateUUID.name = name; // eslint-disable-next-line no-empty\n  } catch (err) {} // For CommonJS default export support\n\n\n  generateUUID.DNS = DNS;\n  generateUUID.URL = URL;\n  return generateUUID;\n}", "import crypto from 'crypto';\n\nfunction sha1(bytes) {\n  if (Array.isArray(bytes)) {\n    bytes = Buffer.from(bytes);\n  } else if (typeof bytes === 'string') {\n    bytes = Buffer.from(bytes, 'utf8');\n  }\n\n  return crypto.createHash('sha1').update(bytes).digest();\n}\n\nexport default sha1;", "import v35 from './v35.js';\nimport sha1 from './sha1.js';\nconst v5 = v35('v5', 0x50, sha1);\nexport default v5;"],
  "mappings": "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",
  "names": ["generateV5_exports", "__export", "generateV5_default", "__toCommonJS", "import_api", "regex_default", "validate", "uuid", "regex_default", "validate_default", "byteToHex", "i", "unsafeStringify", "arr", "offset", "parse", "uuid", "validate_default", "v", "arr", "parse_default", "stringToBytes", "str", "bytes", "i", "DNS", "URL", "v35", "name", "version", "hashfunc", "generateUUID", "value", "namespace", "buf", "offset", "_namespace", "parse_default", "unsafeStringify", "import_crypto", "sha1", "bytes", "crypto", "sha1_default", "v5", "v35", "sha1_default", "v5_default", "UUID_MAX_NUMBER", "generateV5_default", "props", "numberOfUUIDsToGenerate", "name", "upperCaseLetters", "uuidNamespace", "defaultAction", "parseableNumber", "validate_default", "uuids", "v5_default", "element", "action", "successMessage", "e"]
}
