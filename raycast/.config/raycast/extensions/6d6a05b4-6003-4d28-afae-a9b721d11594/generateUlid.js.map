{
  "version": 3,
  "sources": ["../src/generateUlid.tsx", "../node_modules/ulidx/dist/node/index.js", "../node_modules/layerr/dist/error.js", "../node_modules/layerr/dist/tools.js", "../node_modules/layerr/dist/layerr.js"],
  "sourcesContent": ["import { showHUD, Clipboard, getPreferenceValues, showToast, Toast } from \"@raycast/api\";\nimport { monotonicFactory } from \"ulidx\";\n\n// This is required to ensure generated ULIDs are sortable\n// https://github.com/ulid/javascript#monotonic-ulids\nconst ulid = monotonicFactory();\n\ninterface ULIDArguments {\n  numberOfULIDsToGenerate: string;\n}\n\ninterface Preferences {\n  upperCaseLetters: boolean;\n  defaultAction: string;\n}\n\n// don't want to cause a heap error, so cap it \uD83D\uDE31\nconst ULID_MAX_NUMBER = 10000;\n\nexport default async (props: { arguments: ULIDArguments }) => {\n  let { numberOfULIDsToGenerate } = props.arguments;\n  const { upperCaseLetters, defaultAction } = getPreferenceValues<Preferences>();\n\n  if (!numberOfULIDsToGenerate) {\n    numberOfULIDsToGenerate = \"1\";\n  }\n\n  try {\n    const parseableNumber = parseInt(numberOfULIDsToGenerate, 10);\n\n    if (isNaN(parseableNumber)) {\n      throw new Error(\"INVALID_NUMBER\");\n    }\n\n    // safe?\n    if (parseableNumber <= ULID_MAX_NUMBER) {\n      let ulids = Array.from(Array(parseableNumber)).map(() => ulid(150000));\n      if (upperCaseLetters) {\n        ulids = ulids.map((element) => element.toUpperCase());\n      }\n\n      if (defaultAction === \"copy\") {\n        await Clipboard.copy(ulids.join(\"\\r\\n\"));\n      } else if (defaultAction === \"paste\") {\n        await Clipboard.paste(ulids.join(\"\\r\\n\"));\n      }\n      const action = defaultAction === \"copy\" ? \"Copied\" : \"Pasted\";\n      const successMessage = ulids.length > 1 ? `${action} ${ulids.length} new ULIDs.` : `${action} new ULID: ${ulids}`;\n      await showHUD(`\u2705 ${successMessage}`);\n    } else {\n      await showToast({\n        style: Toast.Style.Failure,\n        title: \"Too many ULIDs requested.\",\n        message: `${parseableNumber} exceeds maximum ULIDs of ${ULID_MAX_NUMBER}. Try a lower number.`,\n      });\n    }\n  } catch (e) {\n    await showToast({\n      style: Toast.Style.Failure,\n      title: \"Invalid number.\",\n      message: \"An invalid number has been provided. Try an actual number.\",\n    });\n  }\n};\n", "import crypto from 'node:crypto';\nimport { Layerr } from 'layerr';\n\n// These values should NEVER change. The values are precisely for\n// generating ULIDs.\nconst ENCODING = \"0123456789ABCDEFGHJKMNPQRSTVWXYZ\"; // Crockford's Base32\nconst ENCODING_LEN = 32; // from ENCODING.length;\nconst TIME_MAX = 281474976710655; // from Math.pow(2, 48) - 1;\nconst TIME_LEN = 10;\nconst RANDOM_LEN = 16;\nconst ERROR_INFO = Object.freeze({\n    source: \"ulid\"\n});\nfunction decodeTime(id) {\n    if (id.length !== TIME_LEN + RANDOM_LEN) {\n        throw new Layerr({\n            info: {\n                code: \"DEC_TIME_MALFORMED\",\n                ...ERROR_INFO\n            }\n        }, \"Malformed ULID\");\n    }\n    const time = id\n        .substr(0, TIME_LEN)\n        .toUpperCase()\n        .split(\"\")\n        .reverse()\n        .reduce((carry, char, index) => {\n        const encodingIndex = ENCODING.indexOf(char);\n        if (encodingIndex === -1) {\n            throw new Layerr({\n                info: {\n                    code: \"DEC_TIME_CHAR\",\n                    ...ERROR_INFO\n                }\n            }, `Time decode error: Invalid character: ${char}`);\n        }\n        return (carry += encodingIndex * Math.pow(ENCODING_LEN, index));\n    }, 0);\n    if (time > TIME_MAX) {\n        throw new Layerr({\n            info: {\n                code: \"DEC_TIME_CHAR\",\n                ...ERROR_INFO\n            }\n        }, `Malformed ULID: timestamp too large: ${time}`);\n    }\n    return time;\n}\nfunction detectPRNG(root) {\n    const rootLookup = root || detectRoot();\n    const globalCrypto = (rootLookup && (rootLookup.crypto || rootLookup.msCrypto)) ||\n        (typeof crypto !== \"undefined\" ? crypto : null);\n    if (typeof globalCrypto?.getRandomValues === \"function\") {\n        return () => {\n            const buffer = new Uint8Array(1);\n            globalCrypto.getRandomValues(buffer);\n            return buffer[0] / 0xff;\n        };\n    }\n    else if (typeof globalCrypto?.randomBytes === \"function\") {\n        return () => globalCrypto.randomBytes(1).readUInt8() / 0xff;\n    }\n    else if (crypto?.randomBytes) {\n        return () => crypto.randomBytes(1).readUInt8() / 0xff;\n    }\n    throw new Layerr({\n        info: {\n            code: \"PRNG_DETECT\",\n            ...ERROR_INFO\n        }\n    }, \"Failed to find a reliable PRNG\");\n}\nfunction detectRoot() {\n    if (inWebWorker())\n        return self;\n    if (typeof window !== \"undefined\") {\n        return window;\n    }\n    if (typeof global !== \"undefined\") {\n        return global;\n    }\n    if (typeof globalThis !== \"undefined\") {\n        return globalThis;\n    }\n    return null;\n}\nfunction encodeRandom(len, prng) {\n    let str = \"\";\n    for (; len > 0; len--) {\n        str = randomChar(prng) + str;\n    }\n    return str;\n}\nfunction encodeTime(now, len) {\n    if (isNaN(now)) {\n        throw new Layerr({\n            info: {\n                code: \"ENC_TIME_NAN\",\n                ...ERROR_INFO\n            }\n        }, `Time must be a number: ${now}`);\n    }\n    else if (now > TIME_MAX) {\n        throw new Layerr({\n            info: {\n                code: \"ENC_TIME_SIZE_EXCEED\",\n                ...ERROR_INFO\n            }\n        }, `Cannot encode a time larger than ${TIME_MAX}: ${now}`);\n    }\n    else if (now < 0) {\n        throw new Layerr({\n            info: {\n                code: \"ENC_TIME_NEG\",\n                ...ERROR_INFO\n            }\n        }, `Time must be positive: ${now}`);\n    }\n    else if (Number.isInteger(now) === false) {\n        throw new Layerr({\n            info: {\n                code: \"ENC_TIME_TYPE\",\n                ...ERROR_INFO\n            }\n        }, `Time must be an integer: ${now}`);\n    }\n    let mod, str = \"\";\n    for (let currentLen = len; currentLen > 0; currentLen--) {\n        mod = now % ENCODING_LEN;\n        str = ENCODING.charAt(mod) + str;\n        now = (now - mod) / ENCODING_LEN;\n    }\n    return str;\n}\n/**\n * Fix a ULID's Base32 encoding -\n * i and l (case-insensitive) will be treated as 1 and o (case-insensitive) will be treated as 0.\n * hyphens are ignored during decoding.\n * @param id\n * @returns The cleaned up ULID\n */\nfunction fixULIDBase32(id) {\n    return id.replace(/i/gi, \"1\").replace(/l/gi, \"1\").replace(/o/gi, \"0\").replace(/-/g, \"\");\n}\nfunction incrementBase32(str) {\n    let done = undefined, index = str.length, char, charIndex, output = str;\n    const maxCharIndex = ENCODING_LEN - 1;\n    while (!done && index-- >= 0) {\n        char = output[index];\n        charIndex = ENCODING.indexOf(char);\n        if (charIndex === -1) {\n            throw new Layerr({\n                info: {\n                    code: \"B32_INC_ENC\",\n                    ...ERROR_INFO\n                }\n            }, \"Incorrectly encoded string\");\n        }\n        if (charIndex === maxCharIndex) {\n            output = replaceCharAt(output, index, ENCODING[0]);\n            continue;\n        }\n        done = replaceCharAt(output, index, ENCODING[charIndex + 1]);\n    }\n    if (typeof done === \"string\") {\n        return done;\n    }\n    throw new Layerr({\n        info: {\n            code: \"B32_INC_INVALID\",\n            ...ERROR_INFO\n        }\n    }, \"Failed incrementing string\");\n}\nfunction inWebWorker() {\n    // @ts-ignore\n    return typeof WorkerGlobalScope !== \"undefined\" && self instanceof WorkerGlobalScope;\n}\nfunction isValid(id) {\n    return (typeof id === \"string\" &&\n        id.length === TIME_LEN + RANDOM_LEN &&\n        id\n            .toUpperCase()\n            .split(\"\")\n            .every(char => ENCODING.indexOf(char) !== -1));\n}\nfunction monotonicFactory(prng) {\n    const currentPRNG = prng || detectPRNG();\n    let lastTime = 0, lastRandom;\n    return function _ulid(seedTime) {\n        const seed = isNaN(seedTime) ? Date.now() : seedTime;\n        if (seed <= lastTime) {\n            const incrementedRandom = (lastRandom = incrementBase32(lastRandom));\n            return encodeTime(lastTime, TIME_LEN) + incrementedRandom;\n        }\n        lastTime = seed;\n        const newRandom = (lastRandom = encodeRandom(RANDOM_LEN, currentPRNG));\n        return encodeTime(seed, TIME_LEN) + newRandom;\n    };\n}\nfunction randomChar(prng) {\n    let rand = Math.floor(prng() * ENCODING_LEN);\n    if (rand === ENCODING_LEN) {\n        rand = ENCODING_LEN - 1;\n    }\n    return ENCODING.charAt(rand);\n}\nfunction replaceCharAt(str, index, char) {\n    if (index > str.length - 1) {\n        return str;\n    }\n    return str.substr(0, index) + char + str.substr(index + 1);\n}\nfunction ulid(seedTime, prng) {\n    const currentPRNG = prng || detectPRNG();\n    const seed = isNaN(seedTime) ? Date.now() : seedTime;\n    return encodeTime(seed, TIME_LEN) + encodeRandom(RANDOM_LEN, currentPRNG);\n}\n\nexport { decodeTime, detectPRNG, encodeTime, fixULIDBase32, isValid, monotonicFactory, ulid };\n", "export function assertError(err) {\n    if (!isError(err)) {\n        throw new Error(\"Parameter was not an error\");\n    }\n}\nexport function isError(err) {\n    return objectToString(err) === \"[object Error]\" || err instanceof Error;\n}\nfunction objectToString(obj) {\n    return Object.prototype.toString.call(obj);\n}\n", "import { isError } from \"./error.js\";\nexport function parseArguments(args) {\n    let options, shortMessage = \"\";\n    if (args.length === 0) {\n        options = {};\n    }\n    else if (isError(args[0])) {\n        options = {\n            cause: args[0]\n        };\n        shortMessage = args.slice(1).join(\" \") || \"\";\n    }\n    else if (args[0] && typeof args[0] === \"object\") {\n        options = Object.assign({}, args[0]);\n        shortMessage = args.slice(1).join(\" \") || \"\";\n    }\n    else if (typeof args[0] === \"string\") {\n        options = {};\n        shortMessage = shortMessage = args.join(\" \") || \"\";\n    }\n    else {\n        throw new Error(\"Invalid arguments passed to Layerr\");\n    }\n    return {\n        options,\n        shortMessage\n    };\n}\n", "import { assertError, isError } from \"./error.js\";\nimport { parseArguments } from \"./tools.js\";\nexport class Layerr extends Error {\n    constructor(errorOptionsOrMessage, messageText) {\n        const args = [...arguments];\n        const { options, shortMessage } = parseArguments(args);\n        let message = shortMessage;\n        if (options.cause) {\n            message = `${message}: ${options.cause.message}`;\n        }\n        super(message);\n        this.message = message;\n        if (options.name && typeof options.name === \"string\") {\n            this.name = options.name;\n        }\n        else {\n            this.name = \"Layerr\";\n        }\n        if (options.cause) {\n            Object.defineProperty(this, \"_cause\", { value: options.cause });\n        }\n        Object.defineProperty(this, \"_info\", { value: {} });\n        if (options.info && typeof options.info === \"object\") {\n            Object.assign(this._info, options.info);\n        }\n        if (Error.captureStackTrace) {\n            const ctor = options.constructorOpt || this.constructor;\n            Error.captureStackTrace(this, ctor);\n        }\n    }\n    static cause(err) {\n        assertError(err);\n        if (!err._cause)\n            return null;\n        return isError(err._cause) ? err._cause : null;\n    }\n    static fullStack(err) {\n        assertError(err);\n        const cause = Layerr.cause(err);\n        if (cause) {\n            return `${err.stack}\\ncaused by: ${Layerr.fullStack(cause)}`;\n        }\n        return err.stack;\n    }\n    static info(err) {\n        assertError(err);\n        const output = {};\n        const cause = Layerr.cause(err);\n        if (cause) {\n            Object.assign(output, Layerr.info(cause));\n        }\n        if (err._info) {\n            Object.assign(output, err._info);\n        }\n        return output;\n    }\n    cause() {\n        return Layerr.cause(this);\n    }\n    toString() {\n        let output = this.name || this.constructor.name || this.constructor.prototype.name;\n        if (this.message) {\n            output = `${output}: ${this.message}`;\n        }\n        return output;\n    }\n}\n"],
  "mappings": "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",
  "names": ["generateUlid_exports", "__export", "generateUlid_default", "__toCommonJS", "import_api", "import_node_crypto", "assertError", "err", "isError", "objectToString", "obj", "parseArguments", "args", "options", "shortMessage", "isError", "Layerr", "errorOptionsOrMessage", "messageText", "args", "options", "shortMessage", "parseArguments", "message", "ctor", "err", "assertError", "isError", "cause", "output", "ENCODING", "ENCODING_LEN", "TIME_MAX", "TIME_LEN", "RANDOM_LEN", "ERROR_INFO", "detectPRNG", "root", "rootLookup", "detectRoot", "globalCrypto", "crypto", "buffer", "Layerr", "ERROR_INFO", "inWebWorker", "encodeRandom", "len", "prng", "str", "randomChar", "encodeTime", "now", "TIME_MAX", "mod", "currentLen", "ENCODING_LEN", "ENCODING", "incrementBase32", "str", "done", "index", "char", "charIndex", "output", "maxCharIndex", "ENCODING_LEN", "ENCODING", "Layerr", "ERROR_INFO", "replaceCharAt", "inWebWorker", "monotonicFactory", "prng", "currentPRNG", "detectPRNG", "lastTime", "lastRandom", "seedTime", "seed", "incrementedRandom", "incrementBase32", "encodeTime", "TIME_LEN", "newRandom", "encodeRandom", "RANDOM_LEN", "randomChar", "rand", "ENCODING_LEN", "ENCODING", "replaceCharAt", "str", "index", "char", "ulid", "monotonicFactory", "ULID_MAX_NUMBER", "generateUlid_default", "props", "numberOfULIDsToGenerate", "upperCaseLetters", "defaultAction", "parseableNumber", "ulids", "element", "action", "successMessage"]
}
